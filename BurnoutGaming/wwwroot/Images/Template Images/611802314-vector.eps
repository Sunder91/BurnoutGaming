%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: swift_font20170330.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: Александр
%%CreationDate: 3/31/2017
%%BoundingBox: 0 0 900 900
%%HiResBoundingBox: 0 0 900 900
%%CropBox: 0 0 900 900
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">shark_font</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2017-03-31T00:29:08+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-03-31T00:29:08+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2017-03-31T00:29:08+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2014 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A4nirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirTMFFSaYqy7Rvyj/M3WbaK60/y7cvbTgNDLMY7cMp6MPWaPY9jiqf23/OOH5tzAepp1va1&#xA;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&#xA;7FXYq7FXYq7FXYq7FXYq/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:45662836-e2fb-cd46-ad3e-14afe6966b6d</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:45662836-e2fb-cd46-ad3e-14afe6966b6d</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:a4786eeb-66c4-481b-aa73-3d2ff9c7cc58</stRef:instanceID>
            <stRef:documentID>xmp.did:cc488acc-c2e1-0946-9020-d5df3970ee8c</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8c429d8c-1fea-6543-b422-358d01f9c446</stEvt:instanceID>
                  <stEvt:when>2016-04-28T19:51+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:45662836-e2fb-cd46-ad3e-14afe6966b6d</stEvt:instanceID>
                  <stEvt:when>2017-03-31T00:29:08+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>900.000000</stDim:w>
            <stDim:h>900.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р‘РµР»С‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р§РµСЂРЅС‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>27</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>РћС‚С‚РµРЅРєРё СЃРµСЂРѕРіРѕ</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>27</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>246</xmpG:red>
                           <xmpG:green>246</xmpG:green>
                           <xmpG:blue>246</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 11.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -900 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 900 li
900 900 li
900 0 li
cp
clp
900 900 mo
0 900 li
0 0 li
900 0 li
900 900 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.168627 .168627 .168627 rgb
ef
632.416 353.962 mo
623.096 354.207 607.135 354.408 597.173 356.212 cv
588.186 360.389 569.705 372.102 563.954 377.223 cv
564.127 378.995 565.369 382.099 566.189 383.059 cv
575.719 381.078 597.298 379.173 608.259 378.578 cv
616.593 372.466 626.578 365.516 634.651 359.798 cv
634.405 358.01 633.288 355.03 632.416 353.962 cv
cp
.3 .3 .3 rgb
ef
776.939 795.697 mo
760.645 797.554 742.553 799.42 723.58 800.437 cv
742.872 787.949 774.639 773.769 791.441 768.924 cv
790.765 766.808 789.855 764.261 789.217 762.993 cv
785.631 755.944 782.737 750.043 778.617 745.876 cv
759.244 745.589 730.408 747.259 710.801 750.539 cv
703.457 753.289 685.421 766.534 680.164 771.656 cv
680.203 772.873 681.537 776.876 682.388 777.586 cv
691.206 775.771 702.7 774.015 716.461 772.563 cv
682.204 787.732 655.273 813.263 652.435 818.513 cv
652.426 819.633 653.942 823.939 654.659 824.443 cv
685.762 827.209 732.956 824.801 753.924 821.387 cv
760.757 818.234 774.362 806.935 779.163 801.628 cv
778.999 800.468 777.483 796.344 776.939 795.697 cv
cp
.301961 .301961 .301961 rgb
ef
338.235 313.491 mo
331.107 314.964 317.736 316.221 303.505 317.195 cv
316.639 314.071 328.891 310.825 336.333 308.777 cv
336.824 309.723 337.336 310.816 337.833 311.948 cv
337.996 312.503 338.141 313.032 338.235 313.491 cv
cp
314.824 288.704 mo
322.317 287.89 328.124 287.116 334.163 286.494 cv
327.253 288.683 317.846 291.314 308.699 293.671 cv
310.887 291.645 313.1 289.758 314.824 288.704 cv
cp
383.092 281.367 mo
382.844 280.282 381.726 277.178 380.868 275.437 cv
378.738 269.942 375.46 265.142 373.235 262.511 cv
344.68 262.427 321.541 263.859 290.622 267.294 cv
280.604 272.308 266.089 283.1 260.276 288.622 cv
260.54 290.588 261.409 293.071 262.5 294.553 cv
263.665 294.308 264.868 294.069 266.093 293.836 cv
253.622 306.12 239.032 323.287 231.192 336.426 cv
231.485 338.516 232.478 341.124 233.416 342.356 cv
255.17 343.161 308.56 342.888 343.001 338.063 cv
350.693 332.91 363.439 323.61 368.24 318.303 cv
367.318 313.327 364.467 305.488 362.233 300.153 cv
369.106 294.879 377.55 287.443 383.092 281.367 cv
cp
ef
172.413 315.702 mo
164.448 316.75 156.742 317.621 148.951 318.092 cv
155.714 316.315 163.523 314.443 171.334 312.762 cv
171.837 314.022 172.38 315.303 172.413 315.702 cv
cp
241.906 288.844 mo
240.549 281.027 234.092 267.865 227.997 262.501 cv
210.256 262.102 176.167 263.995 149.794 267.098 cv
142.259 270.644 126.524 281.725 119.763 287.985 cv
119.859 289.346 121.473 292.823 121.987 293.916 cv
140.462 290.681 159.941 288.304 178.981 286.971 cv
157.184 290.963 137.645 295.432 118.477 301.558 cv
115.283 304.08 108.771 310.879 106.517 315.008 cv
108.987 325.872 116.125 336.637 119.802 341.956 cv
143.274 342.35 167.471 340.665 184.857 338.333 cv
192.334 339.88 204.388 341.575 212.03 342.13 cv
211.494 340.627 210.501 337.647 209.806 336.199 cv
208.326 333.798 206.763 331.499 205.42 328.938 cv
213.641 317.485 233.325 296.957 241.906 288.844 cv
cp
ef
525.865 262.379 mo
487.714 261.782 448.926 264.788 428.386 267.311 cv
419.069 272.252 407.21 280.581 398.317 288.486 cv
398.613 290.712 399.482 293.071 400.541 294.417 cv
401.59 294.2 402.811 293.971 404.151 293.735 cv
397.388 300.243 390.399 307.736 384.827 314.996 cv
386.693 321.878 394.019 339.758 399.664 342.367 cv
420.005 342.619 444.194 341.912 469.524 338.063 cv
478.021 333.476 489.962 323.61 494.763 318.303 cv
494.221 316.042 493.104 313.435 492.539 312.372 cv
472.276 314.925 439.324 317.775 423.816 318.238 cv
432.021 307.695 444.486 294.656 452.491 288.77 cv
472.172 286.37 486.095 285.551 504.096 285.791 cv
510.816 282.43 522.099 274.193 528.089 268.309 cv
527.994 266.5 526.753 263.52 525.865 262.379 cv
cp
ef
579.279 288.77 mo
583.554 288.248 590.961 287.054 604.555 286.68 cv
605.806 287.514 607.385 289.559 608.729 291.751 cv
598.621 302.32 587.366 313.011 584.776 315.151 cv
575.654 316.142 562.595 317.158 550.839 317.91 cv
558.985 307.369 571.174 294.729 579.279 288.77 cv
cp
618.572 262.751 mo
597.013 262.553 575.715 264.788 555.174 267.311 cv
545.857 272.252 533.999 280.581 525.105 288.486 cv
525.511 290.215 526.256 292.699 527.329 294.417 cv
528.381 294.199 529.605 293.97 530.949 293.733 cv
517.056 307.195 501.636 325.643 495.292 336.437 cv
495.587 338.144 496.332 341 497.516 342.367 cv
517.857 342.619 579.616 341.1 604.946 337.251 cv
613.833 330.844 635.308 307.021 641.168 299.932 cv
638.751 288.229 626.924 269.798 618.572 262.751 cv
cp
ef
793.483 262.379 mo
755.331 261.782 713.903 264.788 693.362 267.311 cv
684.045 272.252 672.187 280.581 663.293 288.486 cv
663.46 289.843 664.578 292.823 665.517 294.417 cv
666.571 294.199 667.798 293.969 669.144 293.732 cv
654.475 307.985 639.426 326.79 633.63 336.437 cv
633.908 337.771 635.15 341.248 635.854 342.367 cv
656.195 342.619 711.812 341.912 737.142 338.063 cv
745.639 333.476 757.58 323.61 762.381 318.303 cv
762.048 316.911 761.055 313.435 760.157 312.372 cv
744.906 314.294 712.825 316.77 689.039 318.164 cv
689.855 317.148 690.663 316.15 691.385 315.252 cv
706.952 312.995 722.858 311.468 738 310.648 cv
744.706 307.259 754.406 300.52 760.371 294.611 cv
759.937 292.699 759.192 290.215 758.147 288.68 cv
744.297 288.984 729.138 289.598 714.962 290.613 cv
715.886 289.928 716.742 289.304 717.467 288.77 cv
737.148 286.37 753.713 285.551 771.714 285.791 cv
778.434 282.43 789.717 274.193 795.707 268.309 cv
795.201 266.251 794.332 263.52 793.483 262.379 cv
cp
ef
248.417 746.549 mo
237.06 746.274 220.72 747.577 210.061 749.117 cv
196.225 758.025 174.835 778.323 161.253 793.044 cv
162.455 779.172 166.768 760.517 171.456 751.859 cv
171.242 750.251 169.847 746.673 169.232 745.929 cv
159.628 747.03 151.71 748.393 140.907 750.666 cv
131.921 754.843 116.533 766.556 110.783 771.677 cv
110.897 772.873 112.049 776.33 113.007 777.608 cv
116.596 776.913 124.61 775.554 132.645 774.263 cv
130.756 786.685 128.482 808.425 130.002 819.306 cv
130.426 821.149 131.517 823.818 132.226 825.237 cv
144.709 825.962 170.594 823.777 180.816 820.242 cv
193.732 802.237 220.871 772.068 250.64 752.479 cv
250.388 750.676 248.932 747.219 248.417 746.549 cv
cp
ef
434.963 746.549 mo
423.606 746.274 407.266 747.577 396.608 749.117 cv
384.982 756.602 368.035 772.121 354.856 785.624 cv
356.646 773.422 360.207 759.814 364.07 752.681 cv
363.8 751.525 362.527 747.765 361.846 746.751 cv
353.859 747.083 343.093 747.923 335.869 749.117 cv
324.244 756.601 307.298 772.12 294.119 785.623 cv
295.93 773.113 299.561 759.044 303.452 751.859 cv
303.213 750.433 301.878 746.794 301.228 745.929 cv
291.624 747.03 283.705 748.393 272.903 750.666 cv
263.916 754.843 248.529 766.556 242.779 771.677 cv
242.807 773.055 244.384 776.633 245.003 777.608 cv
248.591 776.913 256.605 775.554 264.64 774.263 cv
262.751 786.685 260.477 808.425 261.998 819.306 cv
262.214 820.422 263.306 823.818 264.222 825.237 cv
276.716 825.325 292.66 823.805 303.383 820.774 cv
307.366 815.233 315.678 805.883 322.258 799.476 cv
322.651 797.685 323.132 795.762 323.668 793.802 cv
322.709 804.566 322.456 814.693 322.737 819.306 cv
322.802 820.3 324.318 824.364 324.961 825.237 cv
336.753 825.121 355.41 824.281 367.362 820.242 cv
380.279 802.237 407.417 772.068 437.187 752.479 cv
437.064 750.858 435.79 747.28 434.963 746.549 cv
cp
ef
512.249 817.378 mo
507.534 810.914 503.688 803.681 500.657 796.194 cv
499.612 793.136 498.693 790.059 497.914 786.993 cv
521.252 773.565 547.617 760.34 569.756 752.479 cv
569.519 750.676 568.367 747.522 567.532 746.549 cv
556.175 746.274 535.195 747.577 524.536 749.117 cv
516.813 751.389 506.875 755.109 495.826 759.976 cv
495.339 761.8 494.912 763.707 494.589 765.819 cv
494.38 759.861 494.638 754.465 494.959 751.859 cv
494.558 749.827 493.406 747.158 492.735 745.929 cv
483.131 747.03 472.118 748.393 461.316 750.666 cv
452.329 754.843 436.942 766.556 431.192 771.677 cv
431.181 772.813 432.636 776.633 433.416 777.608 cv
438.281 776.666 453.667 774.079 465.641 772.198 cv
465.657 773.057 465.685 773.923 465.733 774.796 cv
443.128 787.121 419.88 802.594 402.984 819.394 cv
402.858 820.361 404.131 824 405.208 825.324 cv
417.045 825.324 439.015 822.984 447.242 820.242 cv
453.305 815.351 461.92 809.274 472.074 802.718 cv
472.183 802.985 472.291 803.252 472.402 803.516 cv
475.279 812.133 479.352 819.937 484.153 825.237 cv
494.279 825.743 507.562 824.748 514.473 823.308 cv
514.026 821.998 512.692 818.36 512.249 817.378 cv
cp
ef
687.011 746.549 mo
675.654 746.274 654.674 747.577 644.015 749.117 cv
636.34 753.528 624.325 761.784 613.703 769.806 cv
613.195 772.349 612.878 776.044 612.657 779.588 cv
611.598 769.801 612.903 758.513 613.774 751.859 cv
613.49 750.433 612.216 747.037 611.551 745.929 cv
601.947 747.03 595.575 748.393 584.773 750.666 cv
575.786 754.843 560.399 766.556 554.648 771.677 cv
554.843 773.116 555.813 776.452 556.872 777.608 cv
561.576 776.697 574.445 774.249 584.889 772.388 cv
585.071 778.983 585.626 786.779 586.582 793.319 cv
579.732 801.307 572.855 810.331 566.315 819.394 cv
566.366 820.725 567.7 824.303 568.539 825.324 cv
580.376 825.324 599.842 823.601 608.069 820.859 cv
612.145 813.203 617.831 804.539 621.095 800.334 cv
638.02 783.973 669.333 762.816 689.235 752.479 cv
689.179 750.797 687.541 747.158 687.011 746.549 cv
cp
ef
746.928 528.103 mo
736.434 531.51 723.749 535.135 711.65 538.088 cv
715.193 534.578 719.472 530.509 721.861 528.62 cv
732.025 527.515 740.286 526.492 749.579 525.818 cv
748.491 526.87 747.528 527.734 746.928 528.103 cv
cp
786.789 502.437 mo
758.233 502.354 728.862 503.785 697.943 507.22 cv
687.925 512.235 673.41 523.026 667.597 528.549 cv
667.667 530 668.5 533.167 669.821 534.479 cv
671.004 534.231 672.225 533.988 673.468 533.752 cv
661.188 546.091 647.576 563.538 638.513 576.352 cv
638.667 578 639.833 581.167 640.737 582.283 cv
652.571 582.283 668.722 580.209 680.62 577.456 cv
683.585 572.516 686.607 567.715 688.385 565.226 cv
707.185 562.25 743.854 556.515 769.251 545.568 cv
776.201 540.289 786.755 529.333 792.39 523.156 cv
792.39 517.087 789.833 506.667 786.789 502.437 cv
cp
ef
557.097 558.063 mo
565.303 547.538 577.714 534.563 585.693 528.696 cv
589.221 528.266 604.75 526.456 617.711 525.626 cv
606.618 537.794 591.186 552.523 588.095 555.077 cv
574.498 556.555 564.051 557.671 557.097 558.063 cv
cp
639.937 502.422 mo
608.109 502.009 582.128 504.715 561.587 507.237 cv
552.27 512.178 540.412 520.507 531.519 528.413 cv
531.595 529.857 532.837 533.085 533.742 534.343 cv
534.792 534.126 536.013 533.897 537.353 533.661 cv
530.59 540.169 523.601 547.662 518.029 554.922 cv
519.551 561.023 527.247 578.816 532.866 582.294 cv
553.207 582.545 582.935 581.026 608.266 577.177 cv
617.153 570.77 648.215 536.143 654.075 529.054 cv
653.278 522.034 646.201 508.624 639.937 502.422 cv
cp
ef
400.418 503.151 mo
389.061 502.876 372.721 504.179 362.063 505.718 cv
346.437 509.649 326.776 517.546 313.328 524.449 cv
313.615 518.98 314.578 512.593 315.617 508.886 cv
315.545 507.383 314.18 503.782 313.393 502.956 cv
304.073 503.201 293.767 504.995 282.964 507.268 cv
273.978 511.445 258.591 523.158 252.84 528.279 cv
253.09 529.484 254.083 533.085 255.064 534.209 cv
256.068 534.015 257.289 533.791 258.66 533.547 cv
246.863 544.945 228.793 568.043 223.855 576.124 cv
224.159 578.034 225.401 581.386 226.079 582.054 cv
236.205 582.56 255.768 579.506 265.823 577.244 cv
270.823 568.494 281.023 553.84 290.518 543.142 cv
291.262 549.255 292.459 556.481 293.196 559.428 cv
293.568 560.65 294.685 563.754 295.419 565.358 cv
300.419 561.109 308.656 554.863 317.754 548.791 cv
310.779 557.286 301.59 569.738 297.828 576.398 cv
297.79 577.537 299.031 581.634 300.052 582.328 cv
309.802 582.633 329.232 579.586 337.458 576.844 cv
349.139 558.775 372.872 528.669 402.642 509.081 cv
402.835 507.507 401.22 504.03 400.418 503.151 cv
cp
ef
536.079 503.151 mo
524.722 502.876 508.383 504.179 497.724 505.718 cv
487.173 513.258 474.631 525.64 462.826 538.992 cv
462.459 541.384 462.157 544.488 461.927 547.532 cv
461.03 532.756 461.642 516.094 463.448 508.461 cv
463.179 507.259 462.186 503.409 461.224 502.531 cv
451.904 502.776 439.372 504.995 428.57 507.268 cv
419.583 511.445 404.196 523.158 398.446 528.279 cv
398.613 530.105 399.73 532.961 400.669 534.209 cv
401.674 534.015 402.895 533.791 404.265 533.547 cv
392.468 544.945 374.399 568.043 369.46 576.124 cv
369.682 577.785 370.551 581.013 371.684 582.054 cv
381.81 582.56 401.374 579.506 411.428 577.244 cv
416.258 568.792 428.149 552.447 437.734 541.46 cv
437.671 553.15 438.771 569.141 440.549 576.161 cv
440.705 577.413 441.823 580.765 442.773 582.091 cv
452.392 581.767 464.945 579.568 473.12 576.844 cv
484.8 558.775 508.533 528.669 538.303 509.081 cv
537.928 507.134 536.934 504.154 536.079 503.151 cv
cp
ef
219.189 549.679 mo
202.431 553.836 182.541 556.798 163.746 558.452 cv
176.67 541.889 202.84 519.389 218.253 508.557 cv
217.951 507.259 217.081 503.658 216.029 502.627 cv
196.465 503.628 180.355 505.621 169.792 507.237 cv
160.474 512.178 148.616 520.507 139.723 528.413 cv
139.726 529.857 140.967 532.961 141.946 534.343 cv
143.013 534.122 144.258 533.889 145.623 533.649 cv
133.843 545.279 114.493 567.195 109.834 576.364 cv
109.926 577.661 110.795 581.386 112.058 582.294 cv
132.399 582.545 171.434 581.369 196.764 577.519 cv
205.261 572.933 216.612 560.916 221.413 555.609 cv
221.303 554.566 220.061 550.717 219.189 549.679 cv
cp
ef
784.597 452.24 mo
767.833 447.758 738.745 435.026 722.898 424.606 cv
736.479 420.622 759.239 415.904 774.453 413.315 cv
783.792 407.927 798.518 396.793 805.701 389.609 cv
805.507 388.183 804.637 385.079 803.477 383.679 cv
782.158 386.951 759.158 392.007 742.141 396.304 cv
745.724 393.494 748.987 391.043 750.882 389.886 cv
750.501 388.431 749.259 385.203 748.658 383.955 cv
736.648 383.955 709.122 386.355 702.446 387.711 cv
692.641 392.718 680.78 401.274 672.403 408.678 cv
672.524 410.533 673.89 413.513 674.627 414.608 cv
675.764 414.386 676.944 414.16 678.15 413.935 cv
667.876 423.755 649.884 446.112 643.612 456.454 cv
643.842 457.964 644.711 460.944 645.836 462.385 cv
653.09 462.838 675.851 459.975 685.372 457.482 cv
688.084 452.683 692.674 446.007 697.055 440.583 cv
696.737 438.967 695.743 436.484 694.831 434.652 cv
694.696 434.328 694.473 433.888 694.201 433.383 cv
704.289 443.294 725.901 458.949 743.329 465.129 cv
756.956 465.419 775.658 461.069 786.821 458.17 cv
786.509 456.474 785.64 453.37 784.597 452.24 cv
cp
ef
522.997 383.549 mo
511.64 383.275 493.401 384.577 482.743 386.117 cv
477.769 388.959 465.841 398.55 459.336 404.884 cv
454.473 405.418 446.457 406.527 437.664 407.973 cv
445.106 401.362 453.15 394.907 461.664 388.876 cv
461.317 387.314 460.324 383.961 459.44 382.946 cv
450.12 383.191 426.85 385.062 412.223 387.667 cv
403.236 391.844 387.849 403.557 382.098 408.678 cv
382.223 410.285 383.216 412.892 384.322 414.608 cv
385.326 414.414 386.548 414.189 387.918 413.946 cv
376.121 425.343 358.051 448.441 353.113 456.522 cv
353.292 458.089 354.41 461.317 355.337 462.453 cv
365.463 462.959 385.026 459.905 395.081 457.643 cv
398.432 451.778 402.858 445.374 408.18 438.716 cv
416.654 437.053 425.571 435.601 434.259 434.446 cv
429.527 440.431 422.036 450.551 418.508 456.797 cv
418.604 458.585 419.721 461.689 420.732 462.727 cv
430.482 463.032 451.81 459.985 460.037 457.242 cv
471.718 439.174 495.451 409.068 525.22 389.48 cv
525.139 387.686 523.773 384.706 522.997 383.549 cv
cp
ef
597.259 382.946 mo
587.939 383.191 565.092 385.062 550.249 387.667 cv
541.262 391.844 525.875 403.557 520.124 408.678 cv
520.544 410.533 521.786 413.513 522.348 414.608 cv
523.352 414.414 524.574 414.189 525.944 413.946 cv
514.147 425.343 496.077 448.441 491.139 456.522 cv
491.365 458.709 492.234 461.441 493.363 462.453 cv
503.489 462.959 523.052 459.905 533.107 457.643 cv
544.752 437.265 569.106 410.394 599.483 388.876 cv
599.142 387.438 598.521 384.334 597.259 382.946 cv
cp
ef
674.019 382.946 mo
664.699 383.191 632.57 385.062 617.726 387.667 cv
608.739 391.844 593.352 403.557 587.602 408.678 cv
587.719 410.409 589.084 413.389 589.825 414.608 cv
593.594 413.879 604.486 412.37 615.247 410.975 cv
606.256 421.539 586.74 444.926 576.577 454.492 cv
567.703 459.705 559.074 462.843 552.722 465.665 cv
543.472 472.325 529.781 487.126 525.341 493.046 cv
525.635 494.469 526.504 497.946 527.565 498.976 cv
544.823 495.446 579.668 486.306 598.168 477.795 cv
617.621 460.899 658.574 409.937 676.243 388.876 cv
676.001 387.19 674.883 384.085 674.019 382.946 cv
cp
ef
308.359 435.688 mo
296.94 437.042 286.372 438.151 279.078 438.505 cv
285.626 430.099 294.862 420.128 302.389 413.454 cv
304.751 419.028 307.364 429.295 308.359 435.688 cv
cp
383.722 382.704 mo
345.571 382.107 304.143 385.114 283.602 387.636 cv
274.285 392.577 262.427 400.906 253.533 408.811 cv
253.711 410.533 254.952 413.389 255.757 414.742 cv
256.806 414.525 258.027 414.296 259.367 414.06 cv
252.605 420.568 245.615 428.061 240.044 435.321 cv
241.418 441.202 249.262 459.214 254.88 462.693 cv
274.948 462.94 288.049 461.746 312.719 458.018 cv
321.543 459.896 336.996 461.769 342.438 462.119 cv
341.054 445.346 334.046 419.721 328.835 411.491 cv
319.893 411.106 309.411 411.935 302.79 413.098 cv
304.548 411.554 306.206 410.199 307.707 409.095 cv
327.388 406.695 343.952 405.876 361.953 406.116 cv
368.674 402.755 379.956 394.518 385.946 388.634 cv
385.948 387.19 384.955 384.085 383.722 382.704 cv
cp
ef
255.726 382.704 mo
217.574 382.107 176.146 385.114 155.606 387.636 cv
146.288 392.577 134.43 400.906 125.537 408.811 cv
125.571 410.285 126.936 413.637 127.76 414.742 cv
128.809 414.525 130.028 414.296 131.365 414.061 cv
120.623 424.667 105 443.644 96.5226 456.251 cv
96.5157 457.84 97.8815 461.193 98.7465 462.181 cv
109.258 462.67 127.676 460.409 138.432 457.72 cv
140.927 453.413 144.671 447.347 147.493 443.931 cv
147.3 443.313 147.051 442.195 146.653 441.337 cv
164.762 439.364 185.747 438.728 198.358 438.473 cv
204.732 434.495 214.258 426.614 219.667 420.192 cv
219.316 418.355 218.447 415.251 217.443 414.261 cv
203.904 414.566 187.178 415.337 171.292 416.42 cv
174.548 413.284 177.735 410.547 179.711 409.095 cv
199.392 406.695 215.956 405.876 233.957 406.116 cv
240.677 402.755 251.96 394.518 257.95 388.634 cv
257.684 387.19 256.69 383.713 255.726 382.704 cv
cp
ef
533.047 622.226 mo
493.017 621.822 453.661 624.248 433.78 626.889 cv
426.436 629.639 408.4 642.884 403.143 648.006 cv
403.333 649.5 404 652.667 405.367 653.936 cv
407.205 653.558 410.2 653.026 413.658 652.45 cv
414.167 653.667 414.5 654.833 415.292 655.368 cv
427.571 660.345 442.407 668.281 452.3 675.177 cv
430.865 677.75 406.555 677.551 388.885 676.981 cv
385.065 680.117 378.06 689.967 375.414 694.863 cv
375.667 696.333 376.5 699.5 377.638 700.793 cv
408.741 703.559 455.935 701.151 476.903 697.737 cv
483.736 694.584 497.341 683.284 502.142 677.977 cv
502 676.5 501 673.333 499.918 672.047 cv
490.601 664.367 473.268 653.927 458.798 646.943 cv
473.903 645.725 490.742 645.273 511.415 645.273 cv
517.004 642.885 529.578 634.609 535.271 628.156 cv
535.333 626.667 533.833 623.167 533.047 622.226 cv
cp
ef
342.355 645.902 mo
334.045 647.976 324.402 650.483 314.878 652.77 cv
316.727 651.009 318.681 649.321 320.493 648.215 cv
328.884 647.303 335.357 646.508 342.355 645.902 cv
cp
389.493 642.904 mo
389.333 641.5 388 638.333 387.27 636.974 cv
385.543 632.788 380.648 625.283 377.875 622.185 cv
349.32 622.102 320.203 623.84 295.223 626.968 cv
285.205 631.983 270.69 642.774 264.877 648.297 cv
264.822 649.515 266.338 653.275 267.101 654.227 cv
268.283 653.979 269.504 653.736 270.748 653.5 cv
258.468 665.839 244.856 683.286 235.793 696.1 cv
235.954 697.427 237.227 701.248 238.017 702.031 cv
249.851 702.031 266.002 699.957 277.899 697.204 cv
282.999 688.031 287.447 681.9 294.358 674.562 cv
293.879 672.747 293.327 671.227 292.963 670.196 cv
302.876 682.074 322.925 698.113 335.369 704.827 cv
346.365 704.827 369.803 700.909 379.296 697.086 cv
379 695.5 377.833 692.167 377.072 691.156 cv
366.575 687.343 347.494 679.73 335.115 673.261 cv
348.511 670.358 358.481 666.487 369.022 662.294 cv
375.972 657.015 383.859 649.081 389.493 642.904 cv
cp
ef
176.56 675.296 mo
165.076 676.537 156.098 677.464 149.905 677.813 cv
155.281 670.918 162.458 662.975 169.016 656.664 cv
169.529 658.086 170.085 659.529 170.669 660.97 cv
172.285 665.715 174.481 670.832 176.56 675.296 cv
cp
197.146 659.046 mo
197.102 659.044 197.057 659.044 197.014 659.042 cv
196.156 656.799 195.438 654.779 194.922 653.116 cv
187.095 652.779 178.087 653.372 171.52 654.305 cv
174.046 651.983 176.425 649.972 178.502 648.444 cv
182.03 648.014 197.554 646.204 210.514 645.374 cv
206.389 649.899 201.679 654.768 197.21 659.245 cv
197.19 659.181 197.166 659.109 197.146 659.046 cv
cp
214.478 695.717 mo
213.206 693.632 211.824 691.157 210.398 688.454 cv
223.168 675.763 242.4 654.226 246.885 648.802 cv
245.9 641.206 236.621 625.498 232.747 622.171 cv
200.918 621.757 174.938 624.463 154.397 626.985 cv
145.08 631.926 133.222 640.255 124.328 648.161 cv
124.421 649.515 125.574 652.972 126.552 654.091 cv
127.602 653.874 128.822 653.645 130.162 653.409 cv
123.4 659.917 116.411 667.41 110.839 674.67 cv
112.352 680.385 120.057 698.564 125.675 702.042 cv
143.357 702.26 168.13 701.139 190.944 698.314 cv
199.857 699.909 212.006 701.345 216.702 701.647 cv
216.364 700.277 215.03 696.699 214.478 695.717 cv
cp
ef
789.161 622.877 mo
783.669 622.773 768.823 623.464 757.227 624.547 cv
744.533 639.963 723.955 663.075 710.343 674.825 cv
697.001 676.275 687.67 677.378 681.305 677.79 cv
696.022 658.627 719.88 637.927 734.267 628.846 cv
734.333 627.5 732.833 624 732.043 622.915 cv
717.902 623.567 702.254 624.793 685.836 626.985 cv
676.519 631.926 664.661 640.255 655.767 648.161 cv
656 649.667 656.833 653 657.991 654.091 cv
659.041 653.874 660.261 653.645 661.601 653.409 cv
654.839 659.917 647.849 667.41 642.278 674.67 cv
642.779 676.309 643.591 678.339 644.585 680.496 cv
644.558 680.53 644.528 680.566 644.502 680.6 cv
646.484 687.087 653.331 699.7 657.114 702.042 cv
677.456 702.293 705.184 700.774 730.514 696.925 cv
747.22 684.079 783.716 638.592 791.385 628.807 cv
791.167 627.167 790.167 624.167 789.161 622.877 cv
cp
ef
659.786 622.053 mo
621.634 621.457 580.206 624.463 559.665 626.985 cv
550.348 631.926 538.49 640.255 529.596 648.161 cv
529.5 650 531 652.833 531.82 654.091 cv
541.631 652.024 557.823 650.412 571.812 649.203 cv
560.812 659.686 541.665 682.694 532.716 696.002 cv
532.667 697.333 533.833 701 534.94 701.932 cv
545.452 702.421 563.87 700.16 574.626 697.471 cv
588.489 673.537 611.399 651.076 618.436 645.902 cv
622.713 645.575 631.887 645.247 638.016 645.465 cv
644.737 642.105 656.019 633.867 662.009 627.983 cv
662.167 626.167 660.667 623 659.786 622.053 cv
cp
ef
260.585 319.293 mo
282.352 316.552 318.63 307.106 334.109 302.847 cv
335.749 306.011 337.67 310.756 338.235 313.491 cv
323.27 316.583 280.791 318.727 260.585 319.293 cv
cp
282.53 299.6 mo
288.036 297.87 295.744 295.196 300.991 293.05 cv
304.278 289.789 309.321 284.777 312.6 282.774 cv
325.769 281.343 333.73 280.034 346.899 279.461 cv
345.209 281.029 343.727 282.663 341.849 283.821 cv
331.396 288.065 295.272 297.555 282.53 299.6 cv
cp
380.868 275.437 mo
378.738 269.942 375.46 265.142 373.235 262.511 cv
344.68 262.427 321.541 263.859 290.622 267.294 cv
280.604 272.308 266.089 283.1 260.276 288.622 cv
272.048 286.152 287.548 284.224 292.673 283.4 cv
287.77 285.088 274.331 288.505 269.867 290.197 cv
256.701 302.529 239.837 321.938 231.192 336.426 cv
252.946 337.231 306.337 336.958 340.777 332.132 cv
348.47 326.98 361.215 317.68 366.016 312.373 cv
365.226 308.107 362.28 299.881 359.907 294.301 cv
366.798 289.023 375.299 281.542 380.868 275.437 cv
cp
.964706 .964706 .964706 rgb
ef
170.471 310.053 mo
170.428 310.963 172.349 314.939 172.413 315.702 cv
160.454 317.275 149.084 318.472 137.124 318.472 cv
136.936 317.92 135.899 315.796 135.774 315.236 cv
149.991 310.907 177.271 304.47 195.005 302.16 cv
186.602 305.11 178.539 306.947 170.471 310.053 cv
cp
203.072 323.18 mo
211.219 311.76 231.059 291.066 239.682 282.914 cv
237.967 276.819 233.231 267.846 227.997 262.501 cv
210.256 262.102 176.167 263.995 149.794 267.098 cv
142.259 270.644 126.524 281.725 119.763 287.985 cv
148.669 282.924 180.036 279.952 208.323 279.813 cv
207.845 280.857 206.929 281.714 206.278 282.342 cv
172.818 287.653 145.297 292.986 118.477 301.558 cv
115.283 304.08 108.771 310.879 106.517 315.008 cv
108.02 321.618 113.477 330.094 117.578 336.026 cv
141.05 336.419 165.247 334.734 182.633 332.402 cv
190.11 333.95 202.164 335.645 209.806 336.199 cv
207.312 332.153 204.567 328.414 203.072 323.18 cv
cp
ef
428.386 267.311 mo
419.069 272.252 407.21 280.581 398.317 288.486 cv
406.504 286.792 424.998 284.392 430.786 283.404 cv
424.574 285.239 413.422 288.204 407.916 290.18 cv
400.059 297.411 391.442 306.376 384.827 314.996 cv
386.809 321.482 393.656 334.095 397.44 336.437 cv
417.781 336.688 441.97 335.982 467.3 332.132 cv
475.797 327.546 487.738 317.68 492.539 312.373 cv
468.59 315.389 426.908 318.823 417.26 318.239 cv
424.647 307.248 440.667 289.898 450.267 282.84 cv
469.948 280.439 483.871 279.62 501.872 279.86 cv
508.593 276.5 519.875 268.263 525.865 262.379 cv
487.714 261.782 448.926 264.788 428.386 267.311 cv
cp
ef
584.776 315.151 mo
565.761 317.218 529.614 319.395 523.889 319.048 cv
528.399 318.341 543.956 314.864 547.269 313.746 cv
555.366 302.89 568.493 289.135 577.055 282.84 cv
581.331 282.318 588.737 281.124 602.331 280.75 cv
604.705 282.332 608.265 288.266 609.145 291.317 cv
598.933 302.025 587.402 312.981 584.776 315.151 cv
cp
618.572 262.751 mo
597.013 262.553 575.715 264.788 555.174 267.311 cv
545.857 272.252 533.999 280.581 525.105 288.486 cv
533.293 286.792 551.786 284.392 557.574 283.404 cv
551.363 285.239 540.21 288.204 534.705 290.18 cv
519.945 303.762 502.215 324.659 495.292 336.437 cv
515.633 336.688 577.392 335.17 602.722 331.32 cv
611.61 324.913 633.084 301.09 638.944 294.001 cv
634.989 282.925 624.901 268.091 618.572 262.751 cv
cp
ef
693.362 267.311 mo
684.045 272.252 672.187 280.581 663.293 288.486 cv
671.481 286.792 689.974 284.392 695.762 283.404 cv
689.551 285.239 678.398 288.204 672.893 290.18 cv
657.117 304.698 639.922 325.965 633.63 336.437 cv
653.971 336.688 709.588 335.982 734.918 332.132 cv
743.415 327.546 755.356 317.68 760.157 312.373 cv
736.207 315.389 670.744 319.776 661.096 319.192 cv
669.891 317.812 680.273 315.871 684.944 314.588 cv
686.335 312.811 687.882 310.913 689.161 309.322 cv
704.728 307.065 720.635 305.538 735.776 304.718 cv
742.482 301.329 752.182 294.59 758.147 288.68 cv
740.811 289.061 721.418 289.924 704.476 291.457 cv
707.93 288.134 712.491 284.863 715.244 282.84 cv
734.925 280.439 751.489 279.62 769.49 279.86 cv
776.21 276.5 787.493 268.263 793.483 262.379 cv
755.331 261.782 713.903 264.788 693.362 267.311 cv
cp
ef
210.061 749.117 mo
195.334 758.599 172.046 780.986 158.728 795.816 cv
158.249 782.44 163.456 756.596 169.232 745.929 cv
159.628 747.03 151.71 748.393 140.907 750.666 cv
131.921 754.843 116.533 766.556 110.783 771.677 cv
118.63 770.158 147.637 765.462 151.755 765.248 cv
145.427 766.893 138.024 769.572 133.088 771.47 cv
131.143 783.138 128.36 807.557 130.002 819.306 cv
142.485 820.031 168.37 817.846 178.592 814.312 cv
191.508 796.307 218.647 766.138 248.417 746.549 cv
237.06 746.274 220.72 747.577 210.061 749.117 cv
cp
ef
396.608 749.117 mo
384.004 757.231 365.136 774.794 351.607 788.987 cv
352.545 775.192 356.956 755.781 361.846 746.751 cv
353.859 747.083 343.093 747.923 335.869 749.117 cv
323.269 757.229 304.406 774.786 290.877 788.978 cv
291.835 774.959 296.327 754.979 301.228 745.929 cv
291.624 747.03 283.705 748.393 272.903 750.666 cv
263.916 754.843 248.529 766.556 242.779 771.677 cv
250.626 770.158 279.633 765.462 283.751 765.248 cv
277.422 766.893 270.02 769.572 265.083 771.47 cv
263.139 783.138 260.356 807.557 261.998 819.306 cv
274.492 819.394 290.436 817.874 301.159 814.844 cv
305.142 809.303 313.454 799.952 320.034 793.545 cv
321.592 786.446 324.536 777.268 326.787 771.9 cv
323.324 787.658 322.259 811.459 322.737 819.306 cv
334.529 819.191 353.186 818.351 365.138 814.312 cv
378.055 796.307 405.193 766.138 434.963 746.549 cv
423.606 746.274 407.266 747.577 396.608 749.117 cv
cp
ef
567.532 746.549 mo
556.175 746.274 535.195 747.577 524.536 749.117 cv
516.813 751.389 506.875 755.109 495.826 759.976 cv
494.777 763.899 493.987 768.166 493.987 774.171 cv
491.775 764.373 492.157 750.624 492.735 745.929 cv
483.131 747.03 472.118 748.393 461.316 750.666 cv
452.329 754.843 436.942 766.556 431.192 771.677 cv
439.039 770.158 474.259 764.359 478.377 764.145 cv
472.921 765.806 468.901 767.26 465.65 769.143 cv
465.595 770.985 465.628 772.876 465.733 774.796 cv
443.128 787.121 419.88 802.594 402.984 819.394 cv
414.822 819.394 436.791 817.054 445.018 814.312 cv
451.091 809.412 459.724 803.324 469.901 796.755 cv
472.79 805.701 476.974 813.837 481.929 819.306 cv
492.055 819.813 505.338 818.818 512.249 817.378 cv
504.398 806.616 498.911 793.737 495.69 781.063 cv
519.028 767.635 545.393 754.41 567.532 746.549 cv
cp
ef
690.678 801.19 mo
697.35 799.991 705.47 799.047 716.6 797.73 cv
734.98 784.566 770.95 768.261 789.217 762.993 cv
785.631 755.944 782.737 750.043 778.617 745.876 cv
759.244 745.589 730.408 747.259 710.801 750.539 cv
703.457 753.289 685.421 766.534 680.164 771.656 cv
697.065 768.177 723.775 764.912 757.494 763.601 cv
746.092 765.305 735.011 766.777 729.298 767.688 cv
695.402 777.882 656.964 810.134 652.435 818.513 cv
683.538 821.279 730.732 818.871 751.701 815.457 cv
758.533 812.304 772.138 801.004 776.939 795.697 cv
751.422 798.605 721.506 801.547 690.678 801.19 cv
cp
ef
644.015 749.117 mo
636.34 753.528 624.325 761.784 613.703 769.806 cv
613.029 773.177 612.692 778.572 612.467 782.955 cv
608.421 772.166 610.38 754.866 611.551 745.929 cv
601.947 747.03 595.575 748.393 584.773 750.666 cv
575.786 754.843 560.399 766.556 554.648 771.677 cv
562.496 770.158 593.075 764.359 597.193 764.145 cv
592.354 765.86 588.202 767.555 584.831 769.477 cv
584.91 776.586 585.482 785.788 586.582 793.319 cv
579.732 801.307 572.855 810.331 566.315 819.394 cv
578.152 819.394 597.618 817.671 605.845 814.929 cv
609.921 807.273 615.607 798.608 618.871 794.404 cv
635.796 778.043 667.109 756.885 687.011 746.549 cv
675.654 746.274 654.674 747.577 644.015 749.117 cv
cp
ef
691.448 542.424 mo
694.229 541.349 702.436 538.55 703.87 537.88 cv
705.697 535.765 715.503 525.959 719.637 522.69 cv
732.806 521.258 742.774 519.96 755.943 519.387 cv
754.253 520.956 748.807 526.945 746.928 528.103 cv
730.252 533.517 708.04 539.485 691.448 542.424 cv
cp
767.027 539.638 mo
773.978 534.359 784.531 523.403 790.166 517.225 cv
790.166 511.552 788.218 505.09 786.789 502.437 cv
758.233 502.354 728.862 503.785 697.943 507.22 cv
687.925 512.235 673.41 523.026 667.597 528.549 cv
679.369 526.078 694.869 524.15 699.994 523.326 cv
695.091 525.014 681.652 528.431 677.188 530.123 cv
664.022 542.456 648.501 562.229 638.513 576.352 cv
650.347 576.352 666.499 574.279 678.396 571.526 cv
681.361 566.585 684.383 561.785 686.161 559.296 cv
704.961 556.32 741.631 550.584 767.027 539.638 cv
cp
ef
588.095 555.077 mo
569.08 557.144 556.187 558.512 550.462 558.165 cv
557.849 547.174 573.869 529.824 583.469 522.766 cv
587.744 522.245 609.646 519.695 623.24 519.321 cv
612.649 532.024 591.749 552.058 588.095 555.077 cv
cp
639.937 502.423 mo
608.109 502.009 582.128 504.715 561.587 507.237 cv
552.27 512.178 540.412 520.507 531.519 528.413 cv
539.706 526.719 558.2 524.319 563.987 523.331 cv
557.776 525.166 546.624 528.13 541.118 530.107 cv
533.26 537.338 524.644 546.303 518.029 554.922 cv
520.011 561.409 526.858 574.021 530.642 576.363 cv
550.983 576.615 580.712 575.096 606.042 571.247 cv
614.929 564.839 645.991 530.212 651.851 523.123 cv
650.323 518.006 643.768 506.365 639.937 502.423 cv
cp
ef
362.063 505.718 mo
345.616 509.855 324.686 518.389 311.25 525.53 cv
310.447 520.043 311.84 508.498 313.393 502.956 cv
304.073 503.201 293.767 504.995 282.964 507.268 cv
273.978 511.445 258.591 523.158 252.84 528.279 cv
260.688 526.76 281.631 523.43 285.749 523.216 cv
279.42 524.861 267.776 527.899 262.839 529.798 cv
251.701 538.785 229.424 567.01 223.855 576.124 cv
233.981 576.63 253.544 573.576 263.599 571.314 cv
268.874 562.083 279.938 546.272 289.854 535.478 cv
289.945 540.943 292.09 555.006 293.196 559.428 cv
304.249 550.032 331.121 530.872 348.17 525.417 cv
340.547 529.61 330.594 536.768 323.225 542.479 cv
316.777 549.295 302.718 567.743 297.828 576.398 cv
307.578 576.703 327.008 573.656 335.235 570.913 cv
346.915 552.845 370.648 522.739 400.418 503.151 cv
389.061 502.876 372.721 504.179 362.063 505.718 cv
cp
ef
497.724 505.718 mo
487.173 513.258 474.631 525.64 462.826 538.992 cv
462 544.376 461.5 553.376 461.417 557.153 cv
458.51 540.935 458.725 513.09 461.224 502.531 cv
451.904 502.776 439.372 504.995 428.57 507.268 cv
419.583 511.445 404.196 523.158 398.446 528.279 cv
406.293 526.76 427.236 523.43 431.355 523.216 cv
425.026 524.861 413.381 527.899 408.445 529.798 cv
397.306 538.785 375.029 567.01 369.46 576.124 cv
379.586 576.63 399.15 573.576 409.204 571.314 cv
414.479 562.083 428.185 543.418 438.1 532.624 cv
437.083 543.001 438.25 567.085 440.549 576.161 cv
450.168 575.837 462.721 573.638 470.896 570.913 cv
482.576 552.845 506.309 522.739 536.079 503.151 cv
524.722 502.876 508.383 504.179 497.724 505.718 cv
cp
ef
169.792 507.237 mo
160.474 512.178 148.616 520.507 139.723 528.413 cv
147.91 526.719 166.404 524.319 172.191 523.331 cv
165.98 525.166 154.828 528.13 149.322 530.107 cv
138.443 540.118 115.023 566.152 109.834 576.364 cv
130.175 576.615 169.21 575.438 194.54 571.589 cv
203.037 567.002 214.388 554.986 219.189 549.679 cv
194.802 555.729 163.78 559.247 139.155 559.886 cv
145.392 559.087 154.346 556.848 159.339 555.435 cv
171.263 538.701 199.692 514.108 216.029 502.627 cv
196.465 503.628 180.355 505.621 169.792 507.237 cv
cp
ef
772.229 407.384 mo
781.568 401.997 796.294 390.862 803.477 383.679 cv
775.293 388.005 744.161 395.449 727.816 400.135 cv
734.163 394.922 744.577 386.449 748.658 383.955 cv
736.648 383.955 709.122 386.355 702.446 387.711 cv
692.641 392.718 680.78 401.274 672.403 408.678 cv
682.522 406.696 695.77 404.505 704.845 403.567 cv
698.482 405.236 686.59 408.469 682.313 410.347 cv
673.76 416.502 650.858 444.505 643.612 456.454 cv
650.866 456.908 673.627 454.045 683.148 451.551 cv
685.86 446.753 690.45 440.077 694.831 434.652 cv
694.049 432.77 690.441 427.192 690.012 425.44 cv
698.983 435.1 722.445 452.582 741.105 459.198 cv
754.732 459.488 773.434 455.139 784.597 452.24 cv
765.229 447.061 729.398 430.869 716.557 419.956 cv
729.17 415.751 755.348 410.258 772.229 407.384 cv
cp
ef
482.743 386.117 mo
477.769 388.959 465.841 398.55 459.336 404.884 cv
452.549 405.63 439.629 407.491 427.012 409.831 cv
436.661 400.524 447.606 391.329 459.44 382.946 cv
450.12 383.191 426.85 385.062 412.223 387.667 cv
403.236 391.844 387.849 403.557 382.098 408.678 cv
389.946 407.159 410.889 403.829 415.007 403.615 cv
408.679 405.26 397.034 408.298 392.097 410.197 cv
380.959 419.183 358.682 447.409 353.113 456.522 cv
363.239 457.029 382.802 453.975 392.857 451.713 cv
396.208 445.848 400.635 439.444 405.956 432.786 cv
423.693 429.305 443.386 426.731 458.814 425.929 cv
453.7 427.042 443.997 428.568 438.119 429.826 cv
435.9 432.041 423.398 448.141 418.508 456.797 cv
428.258 457.101 449.586 454.054 457.813 451.312 cv
469.494 433.244 493.227 403.138 522.997 383.549 cv
511.64 383.275 493.401 384.577 482.743 386.117 cv
cp
ef
597.259 382.946 mo
587.939 383.191 565.092 385.062 550.249 387.667 cv
541.262 391.844 525.875 403.557 520.124 408.678 cv
527.972 407.159 548.915 403.829 553.033 403.615 cv
546.705 405.26 535.06 408.298 530.123 410.197 cv
518.985 419.183 496.708 447.409 491.139 456.522 cv
501.265 457.029 520.828 453.975 530.883 451.713 cv
542.528 431.334 566.882 404.464 597.259 382.946 cv
cp
ef
632.416 353.962 mo
623.096 354.207 607.135 354.408 597.173 356.212 cv
588.186 360.389 569.705 372.102 563.954 377.223 cv
573.484 375.242 595.063 373.338 606.024 372.742 cv
614.358 366.631 624.343 359.681 632.416 353.962 cv
cp
ef
674.019 382.946 mo
664.699 383.191 632.57 385.062 617.726 387.667 cv
608.739 391.844 593.352 403.557 587.602 408.678 cv
595.449 407.159 634.189 402.26 638.307 402.046 cv
631.978 403.691 622.454 406.423 617.518 408.322 cv
610.065 416.951 587.708 444.016 576.577 454.492 cv
567.703 459.705 559.074 462.843 552.722 465.665 cv
543.472 472.325 529.781 487.126 525.341 493.046 cv
542.6 489.516 577.444 480.375 595.945 471.865 cv
615.397 454.969 656.35 404.007 674.019 382.946 cv
cp
ef
283.602 387.636 mo
274.285 392.577 262.427 400.906 253.533 408.811 cv
261.721 407.117 280.214 404.717 286.002 403.729 cv
279.79 405.565 268.638 408.529 263.132 410.505 cv
255.275 417.736 246.658 426.701 240.044 435.321 cv
242.026 441.807 248.872 454.42 252.656 456.762 cv
272.724 457.01 285.825 455.816 310.495 452.087 cv
319.319 453.966 334.772 455.839 340.214 456.189 cv
339.28 444.869 333.961 420.887 328.835 411.491 cv
319.665 411.096 308.862 411.977 302.278 413.186 cv
304.669 418.696 307.348 429.195 308.359 435.688 cv
292.745 437.539 278.694 438.94 272.476 438.564 cv
279.864 427.573 295.884 410.223 305.483 403.165 cv
325.164 400.765 341.729 399.945 359.729 400.185 cv
366.45 396.825 377.732 388.588 383.722 382.704 cv
345.571 382.107 304.143 385.114 283.602 387.636 cv
cp
ef
155.606 387.636 mo
146.288 392.577 134.43 400.906 125.537 408.811 cv
133.724 407.117 152.218 404.717 158.005 403.729 cv
151.794 405.565 140.642 408.529 135.136 410.505 cv
124.635 419.827 106.057 442.073 96.5227 456.251 cv
107.034 456.74 125.452 454.479 136.208 451.789 cv
138.703 447.482 142.447 441.416 145.269 438.001 cv
140.462 437.976 129.218 438.362 123.257 438.845 cv
142.574 434.061 178.006 432.91 196.135 432.543 cv
202.509 428.565 212.034 420.683 217.443 414.261 cv
201.463 414.621 181.038 415.628 162.802 417.035 cv
167.537 411.565 174.195 405.585 177.487 403.165 cv
197.168 400.765 213.732 399.945 231.733 400.185 cv
238.454 396.825 249.736 388.588 255.726 382.704 cv
217.574 382.107 176.146 385.114 155.606 387.636 cv
cp
ef
533.047 622.226 mo
493.017 621.822 453.661 624.248 433.78 626.889 cv
426.436 629.639 408.4 642.884 403.143 648.006 cv
409.633 646.67 430.532 643.425 435.399 643.043 cv
429.483 644.475 417.267 647.719 413.068 649.437 cv
428.696 655.773 448.469 666.899 456.916 674.575 cv
434.429 677.78 407.837 677.592 388.885 676.981 cv
385.065 680.117 378.06 689.967 375.414 694.863 cv
406.517 697.629 453.711 695.221 474.679 691.807 cv
481.512 688.654 495.117 677.354 499.918 672.047 cv
487.9 662.14 462.54 647.637 447.199 641.89 cv
464.72 640.003 484.145 639.343 509.191 639.343 cv
514.78 636.955 527.354 628.679 533.047 622.226 cv
cp
ef
292.607 657.564 mo
295.388 656.489 305.131 653.59 306.565 652.92 cv
309.241 650.382 314.127 644.814 318.269 642.285 cv
331.438 640.853 339.878 639.708 353.047 639.135 cv
351.357 640.704 348.577 643.671 346.699 644.829 cv
331.17 648.611 309.2 654.625 292.607 657.564 cv
cp
377.072 691.156 mo
363.822 686.344 336.885 675.474 327.03 668.496 cv
343.497 665.51 354.776 661.146 366.798 656.364 cv
373.748 651.085 381.635 643.151 387.27 636.974 cv
385.543 632.788 380.648 625.283 377.875 622.185 cv
349.32 622.102 320.203 623.84 295.223 626.968 cv
285.205 631.983 270.69 642.774 264.877 648.297 cv
276.649 645.826 292.149 643.898 297.274 643.074 cv
292.371 644.762 278.932 648.179 274.468 649.871 cv
261.302 662.204 245.781 681.977 235.793 696.1 cv
247.627 696.1 263.779 694.027 275.676 691.274 cv
280.775 682.101 285.507 675.809 292.417 668.471 cv
290.998 666.09 288.605 662.649 287.761 660.709 cv
296.591 672.541 319.835 691.715 333.145 698.897 cv
344.141 698.897 367.579 694.979 377.072 691.156 cv
cp
ef
143.272 677.913 mo
150.659 666.922 166.679 649.572 176.278 642.514 cv
180.554 641.992 202.455 639.443 216.05 639.069 cv
211.066 645.046 203.801 652.646 197.124 659.333 cv
196.215 656.97 195.461 654.852 194.922 653.116 cv
185.752 652.721 174.95 653.602 168.366 654.811 cv
170.755 661.892 174.475 669.848 177.169 675.23 cv
160.199 677.067 148.613 678.237 143.272 677.913 cv
cp
207.641 683.055 mo
220.402 670.442 240.114 648.371 244.661 642.871 cv
243.133 637.754 236.578 626.113 232.747 622.171 cv
200.918 621.757 174.938 624.463 154.397 626.985 cv
145.08 631.926 133.222 640.255 124.328 648.161 cv
132.516 646.467 151.009 644.067 156.797 643.079 cv
150.586 644.914 139.433 647.878 133.928 649.855 cv
126.07 657.086 117.454 666.051 110.839 674.67 cv
112.821 681.156 119.668 693.769 123.452 696.112 cv
141.133 696.33 165.906 695.209 188.72 692.384 cv
197.634 693.979 209.782 695.415 214.478 695.717 cv
212.397 692.304 210.02 687.857 207.641 683.055 cv
cp
ef
757.227 624.547 mo
744.533 639.963 723.955 663.075 710.343 674.825 cv
691.329 676.892 680.435 678.26 674.71 677.913 cv
688.607 657.238 716.125 632.963 732.043 622.915 cv
717.902 623.567 702.254 624.793 685.836 626.985 cv
676.519 631.926 664.661 640.255 655.767 648.161 cv
663.955 646.467 682.448 644.067 688.236 643.079 cv
682.025 644.914 670.872 647.878 665.367 649.855 cv
657.509 657.086 648.893 666.051 642.278 674.67 cv
644.26 681.157 651.107 693.769 654.891 696.112 cv
675.232 696.363 702.96 694.844 728.29 690.995 cv
744.996 678.149 781.492 632.662 789.161 622.877 cv
783.669 622.773 768.823 623.464 757.227 624.547 cv
cp
ef
559.665 626.985 mo
550.348 631.926 538.49 640.255 529.596 648.161 cv
548.247 644.231 589.965 641.943 595.753 640.955 cv
589.542 642.79 579.367 645.337 573.861 647.313 cv
563.36 656.634 542.25 681.824 532.716 696.002 cv
543.228 696.491 561.646 694.229 572.402 691.54 cv
586.265 667.607 609.175 645.146 616.212 639.972 cv
620.489 639.645 629.663 639.317 635.793 639.535 cv
642.513 636.174 653.796 627.937 659.786 622.053 cv
621.634 621.457 580.206 624.463 559.665 626.985 cv
cp
ef
770.57 67.2112 mo
741.032 65.2679 701.431 65.6762 672.928 67.6741 cv
672.728 67.4474 672.434 66.979 672.434 66.979 cv
647.42 66.0632 608.892 65.9775 581.465 67.8168 cv
583.217 66.576 li
583.067 66.1607 582.661 65.4835 582.303 65.2051 cv
564.652 64.7873 527.617 66.4784 513.283 68.0117 cv
490.583 66.9293 459.918 67.493 440.639 70.4541 cv
438.078 72.1035 li
435.628 73.6809 433.007 75.5497 430.285 77.6219 cv
431.904 74.3533 434.317 70.0862 435.857 67.868 cv
435.708 67.5151 435.302 66.7702 434.944 66.4971 cv
419.501 66.5911 390.752 68.4513 379.776 70.5342 cv
376.837 72.3112 371.628 75.9211 367.743 79.0423 cv
369.154 75.3261 371.405 70.6905 373.42 67.0917 cv
373.338 66.7025 372.932 66.093 372.506 65.7208 cv
369.259 65.8421 358.662 66.9965 352.416 67.8861 cv
352.142 67.3797 351.871 66.7025 351.632 66.3093 cv
318.502 65.5652 265.365 66.2779 232.389 71.2202 cv
211.144 80.0187 180.691 107.129 167.693 121.056 cv
167.693 121.056 168.215 122.097 168.607 122.427 cv
172.05 122.749 li
159.034 132.322 135.875 155.583 129.43 164.334 cv
129.547 164.761 129.953 165.438 130.344 165.705 cv
171.411 172 251.238 169.777 281.757 164.689 cv
284.933 163.355 291.727 159.59 296.993 155.243 cv
297.276 158.958 297.947 164.252 298.855 167.978 cv
299.117 168.418 299.524 169.027 299.769 169.349 cv
315.767 170.274 340.73 168.583 358.333 163.481 cv
358.62 168.193 li
358.779 168.621 359.117 169.298 359.534 169.564 cv
370.706 170.103 391.417 169.214 406.25 166.793 cv
406.29 167.284 406.927 167.876 407.173 168.167 cv
418.493 169.739 441.174 169.63 457.228 167.3 cv
457.514 167.741 457.947 168.201 457.947 168.201 cv
476.844 170.455 507.761 168.621 532.274 163.055 cv
534.676 158.379 538.547 152.062 541.866 147.496 cv
554.292 146.203 571.71 145.639 584.196 145.582 cv
585.331 144.93 589.264 142.013 592.952 139.256 cv
585.31 148.142 577.585 159.245 573.847 166.884 cv
573.925 167.334 574.399 168.011 574.761 168.255 cv
594.559 169.747 630.023 168.461 646.958 163.055 cv
659.034 142.202 673.488 124.963 686.933 113.083 cv
697.521 112.643 708.846 112.733 719.352 112.984 cv
743.361 100.979 760.717 82.1671 771.484 68.5821 cv
771.328 68.1923 770.854 67.6505 770.57 67.2112 cv
cp
.25098 .25098 .25098 rgb
ef
358.236 161.882 mo
340.597 167.167 315.097 168.917 298.855 167.978 cv
297.763 163.5 297.013 156.75 296.869 153.21 cv
291.513 157.834 284.18 161.917 280.843 163.318 cv
250.324 168.406 170.497 170.629 129.43 164.334 cv
136.145 155.217 161.009 130.34 173.635 121.613 cv
167.693 121.056 li
180.691 107.129 211.144 80.0188 232.389 71.2202 cv
265.365 66.2779 318.502 65.5653 351.632 66.3093 cv
351.341 66.8301 350.617 67.7749 350.166 68.2258 cv
355.691 67.3239 368.825 65.8583 372.506 65.7208 cv
369.907 70.363 366.908 76.7376 365.837 80.6271 cv
369.727 77.245 376.322 72.6227 379.776 70.5342 cv
390.752 68.4513 419.501 66.5911 434.944 66.4971 cv
432.804 69.5787 428.971 76.6249 427.937 79.4365 cv
431.504 76.6279 434.929 74.1304 438.078 72.1035 cv
440.639 70.4541 li
459.918 67.493 490.583 66.9293 513.283 68.0117 cv
527.617 66.4784 564.652 64.7873 582.303 65.2051 cv
578.301 68.0401 li
605.858 65.9711 646.444 66.0274 672.434 66.979 cv
671.632 67.7666 li
700.221 65.6892 740.581 65.2383 770.57 67.2112 cv
759.803 80.7962 742.447 99.6083 718.438 111.613 cv
707.932 111.362 696.607 111.272 686.019 111.712 cv
672.574 123.592 658.12 140.831 646.044 161.684 cv
629.109 167.09 593.645 168.376 573.847 166.884 cv
578.572 157.229 589.665 142.026 598.91 132.782 cv
596.598 134.401 585.34 143.028 583.282 144.211 cv
570.797 144.268 553.378 144.832 540.952 146.126 cv
537.633 150.691 533.762 157.008 531.361 161.684 cv
506.847 167.25 475.93 169.084 457.033 166.831 cv
457.79 165.706 li
441.68 168.25 417.93 168.417 406.259 166.796 cv
407.226 165.214 li
392.347 167.834 370.18 168.75 358.62 168.193 cv
358.236 161.882 li
cp
.129412 .129412 .129412 rgb
ef
738.284 75.0515 mo
700.261 74.4572 653.335 77.441 632.685 79.9583 cv
634.578 78.3887 636.309 76.8536 637.735 75.4531 cv
599.583 74.8568 561.155 77.863 540.614 80.3855 cv
537.688 81.9375 534.51 83.8244 531.253 85.9268 cv
533.75 84.0227 536.291 82.1475 538.88 80.3138 cv
538.346 78.8604 536.55 76.0399 535.613 75.4135 cv
526.293 75.6588 503.446 77.5297 488.602 80.1339 cv
487.627 80.587 486.566 81.143 485.46 81.7556 cv
485.733 81.5739 486.005 81.3868 486.278 81.207 cv
485.74 79.7401 484.11 77.2742 483.011 76.3066 cv
471.654 76.0317 455.315 77.3344 444.656 78.8741 cv
433.336 86.1625 416.973 101.067 403.953 114.312 cv
405.744 102.12 409.303 88.534 413.161 81.4089 cv
412.557 79.7841 411.123 77.35 409.894 76.5086 cv
401.907 76.8403 391.141 77.6808 383.917 78.8741 cv
372.598 86.1623 356.236 101.066 343.216 114.311 cv
345.029 101.811 348.657 87.7637 352.543 80.587 cv
352.233 79.608 350.559 76.7018 349.276 75.6867 cv
342.477 76.4662 336.074 77.3829 329.082 78.658 cv
328.675 77.8907 327.442 75.8212 326.741 75.2255 cv
286.711 74.8212 254.691 77.2473 234.81 79.8886 cv
227.466 82.6384 209.43 95.8837 204.173 101.005 cv
204.635 102.329 205.994 104.733 207.44 105.906 cv
209.151 105.553 211.864 105.068 215.021 104.538 cv
215.555 105.367 216.612 106.688 217.365 107.337 cv
230.098 112.499 245.581 120.841 255.449 127.906 cv
232.622 130.765 195.044 130.569 176.774 129.981 cv
171.407 132.92 160.001 143.319 156.443 147.862 cv
156.932 149.674 158.357 151.645 159.71 152.763 cv
190.813 155.528 258.008 153.121 278.976 149.706 cv
285.809 146.554 299.414 135.254 304.215 129.947 cv
303.532 128.44 302.079 126.327 300.948 125.047 cv
291.254 117.056 272.883 106.077 258.088 99.1126 cv
269.948 97.9634 279.945 97.4274 295.702 97.2843 cv
293.759 98.8833 292.082 100.317 290.827 101.435 cv
291.379 102.857 292.964 105.318 294.094 106.335 cv
297.548 105.667 305.1 104.383 312.825 103.136 cv
310.912 115.385 308.489 137.919 310.046 149.064 cv
310.532 150.477 312.163 152.966 313.313 153.964 cv
325.807 154.052 341.751 152.532 352.475 149.502 cv
356.456 143.963 364.762 134.618 371.341 128.211 cv
370.695 137.159 370.545 145.123 370.785 149.064 cv
371.239 150.403 372.84 152.966 374.052 153.964 cv
385.844 153.849 404.502 153.008 416.454 148.97 cv
425.257 136.698 440.671 118.776 459.018 102.404 cv
459.696 103.744 460.818 105.454 461.745 106.045 cv
462.761 105.849 463.999 105.621 465.39 105.375 cv
453.648 116.344 434.586 140.655 429.492 148.99 cv
430.16 150.869 431.722 153.055 432.759 153.89 cv
442.885 154.396 462.449 151.343 472.503 149.08 cv
480.311 135.416 493.84 118.833 511.062 102.902 cv
511.736 104.207 512.91 105.765 513.812 106.461 cv
514.864 106.243 516.088 106.014 517.432 105.778 cv
506.682 116.144 490.291 135.973 481.531 149.001 cv
481.92 150.368 483.505 152.922 484.798 153.901 cv
495.31 154.39 513.728 152.128 524.484 149.439 cv
526.979 145.132 530.723 139.066 533.544 135.651 cv
533.306 134.825 532.602 133.504 532.338 133.023 cv
549.49 131.076 568.871 130.446 581.41 130.192 cv
587.784 126.215 597.309 118.333 602.719 111.911 cv
602.213 110.656 600.518 107.988 599.452 107.011 cv
585.971 107.315 571.455 108.082 556.298 109.159 cv
559.905 105.603 563.576 102.422 565.762 100.814 cv
581.626 98.8798 593.523 97.9747 606.967 97.8217 cv
605.642 98.9355 604.341 100.051 603.094 101.159 cv
603.72 102.779 605.289 104.944 606.361 106.06 cv
614.722 104.298 625.707 102.867 635.807 101.735 cv
624.897 111.981 605.301 135.487 596.214 149.001 cv
596.638 150.429 598.329 153.06 599.481 153.901 cv
609.993 154.39 628.41 152.128 639.167 149.439 cv
653.029 125.505 675.94 103.045 682.976 97.871 cv
692.988 97.2169 708.496 97.2169 717.558 97.4335 cv
724.278 94.0733 735.561 85.8358 741.551 79.9518 cv
741.257 78.4329 739.422 75.8516 738.284 75.0515 cv
cp
.35 .35 .35 rgb
ef
632.685 79.9583 mo
634.578 78.3887 636.309 76.8536 637.735 75.4531 cv
599.583 74.8568 561.155 77.863 540.614 80.3855 cv
531.297 85.3264 519.439 93.6553 510.545 101.561 cv
518.733 99.8668 537.226 97.4669 543.014 96.4788 cv
536.31 98.2658 525.65 101.279 520.145 103.255 cv
509.644 112.576 491.065 134.822 481.531 149.001 cv
492.043 149.489 510.461 147.228 521.217 144.539 cv
523.712 140.232 527.456 134.166 530.277 130.75 cv
525.47 130.726 514.227 131.111 508.265 131.594 cv
527.583 126.811 560.014 125.659 578.143 125.292 cv
584.517 121.314 594.042 113.433 599.452 107.011 cv
583.472 107.371 566.047 108.378 547.81 109.784 cv
552.546 104.315 559.203 98.3347 562.495 95.9141 cv
581.908 93.5466 595.378 92.7196 613.017 92.9277 cv
609.551 95.6169 606.184 98.4124 603.094 101.159 cv
621.745 97.2299 653.463 94.9417 659.251 93.9535 cv
653.039 95.7887 642.864 98.335 637.359 100.311 cv
626.858 109.633 605.748 134.822 596.214 149.001 cv
606.726 149.489 625.143 147.228 635.9 144.539 cv
649.762 120.605 672.673 98.1445 679.709 92.9706 cv
689.721 92.3165 705.229 92.3165 714.291 92.5331 cv
721.011 89.173 732.294 80.9355 738.284 75.0515 cv
700.261 74.4572 653.335 77.441 632.685 79.9583 cv
cp
535.613 75.4135 mo
526.293 75.6588 503.446 77.5297 488.602 80.1339 cv
479.615 84.3108 464.228 96.0242 458.478 101.145 cv
466.325 99.6262 487.268 96.2962 491.387 96.0821 cv
485.058 97.7275 473.413 100.765 468.477 102.664 cv
457.338 111.651 435.062 139.876 429.492 148.99 cv
439.618 149.496 459.182 146.442 469.236 144.18 cv
480.881 123.802 505.235 96.9309 535.613 75.4135 cv
cp
413.187 144.069 mo
401.235 148.108 382.577 148.948 370.785 149.064 cv
370.307 141.217 371.372 117.416 374.836 101.658 cv
372.585 107.026 369.641 116.203 368.082 123.303 cv
361.502 129.71 353.191 139.061 349.208 144.602 cv
338.484 147.632 322.54 149.152 310.046 149.064 cv
308.404 137.314 311.187 112.895 313.132 101.228 cv
318.068 99.3293 325.471 96.6508 331.799 95.0054 cv
327.681 95.2195 298.675 99.916 290.827 101.435 cv
293.288 99.243 297.36 95.8424 301.913 92.3429 cv
277.084 92.3484 265.677 93.0101 248.229 94.8891 cv
263.57 100.637 288.93 115.14 300.948 125.047 cv
296.147 130.353 282.542 141.653 275.709 144.806 cv
254.741 148.22 187.546 150.628 156.443 147.862 cv
160.001 143.319 171.407 132.92 176.774 129.981 cv
195.726 130.591 235.459 130.78 257.946 127.574 cv
249.499 119.899 229.726 108.772 214.098 102.437 cv
218.297 100.719 230.512 97.4743 236.429 96.0429 cv
231.562 96.4246 210.663 99.6693 204.173 101.005 cv
209.43 95.8837 227.466 82.6384 234.81 79.8886 cv
254.691 77.2473 286.711 74.8212 326.741 75.2255 cv
324.926 76.8651 322.649 78.6301 320.205 80.3986 cv
330.95 78.1415 339.71 76.7835 349.276 75.6867 cv
344.375 84.7369 339.883 104.716 338.926 118.735 cv
352.454 104.544 371.317 86.9869 383.917 78.8741 cv
391.141 77.6808 401.907 76.8403 409.894 76.5086 cv
405.004 85.539 400.594 104.949 399.655 118.745 cv
413.184 104.552 432.053 86.9888 444.656 78.8741 cv
455.315 77.3344 471.654 76.0317 483.011 76.3066 cv
453.241 95.895 426.103 126.064 413.187 144.069 cv
cp
level3{
gsave
[3.3265e-009 -74.0925 74.0925 3.3265e-009 447.364 149.067 ]ct
<<
/PatternType 2
/Shading
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.776471 .776471 .776471 ]
/C1 [1 1 1 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>> /Gradient add_res /0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[3.3265e-009 -74.0925 74.0925 3.3265e-009 447.364 149.067 ]ct
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~`l?$<`lH-?a2l?CaN2KFaiV]Jb0%lMbKJ)Qbfn;Tc-=MXcHa_\cHjh_cd:%cd*U1fdF$CjdaHRme'ldq
eC<!te^`4#f%/F'f%8O*f@\a.f\"m1g"G*5g=k98gY:K<gt^]?h;-oChVR,GhV[5Jhr*GNi8ESQiSieU
io8tXj5]1\jQ,C_jlPUck2tggk3(pjkNM-nkih9ql07KulK[[#lg*m'm-O**mHs<.mdBN2mdKW5n*oi9
nF5u<naZ2@o()ACoCMSGo^qeJp%A"Np@e4Rp@n=Up\=OYq"X[\q>'m`qYL'cqtp9gr;?KjrVc]nrr2or
~>
<~`l?$<`lH-?a2l?CaN2KFaiV]Jb0%lMbKJ)Qbfn;Tc-=MXcHa_\cHjh_cd:%cd*U1fdF$CjdaHRme'ldq
eC<!te^`4#f%/F'f%8O*f@\a.f\"m1g"G*5g=k98gY:K<gt^]?h;-oChVR,GhV[5Jhr*GNi8ESQiSieU
io8tXj5]1\jQ,C_jlPUck2tggk3(pjkNM-nkih9ql07KulK[[#lg*m'm-O**mHs<.mdBN2mdKW5n*oi9
nF5u<naZ2@o()ACoCMSGo^qeJp%A"Np@e4Rp@n=Up\=OYq"X[\q>'m`qYL'cqtp9gr;?KjrVc]nrr2or
~>
<~`l?$<`lH-?a2l?CaN2KFaiV]Jb0%lMbKJ)Qbfn;Tc-=MXcHa_\cHjh_cd:%cd*U1fdF$CjdaHRme'ldq
eC<!te^`4#f%/F'f%8O*f@\a.f\"m1g"G*5g=k98gY:K<gt^]?h;-oChVR,GhV[5Jhr*GNi8ESQiSieU
io8tXj5]1\jQ,C_jlPUck2tggk3(pjkNM-nkih9ql07KulK[[#lg*m'm-O**mHs<.mdBN2mdKW5n*oi9
nF5u<naZ2@o()ACoCMSGo^qeJp%A"Np@e4Rp@n=Up\=OYq"X[\q>'m`qYL'cqtp9gr;?KjrVc]nrr2or
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
478.444 201.238 mo
470.235 202.13 464.28 202.764 460.884 202.828 cv
464.895 197.241 472.33 189.289 476.902 185.928 cv
478.893 185.685 488.401 184.579 495.299 184.248 cv
489.693 190.699 480.192 199.794 478.444 201.238 cv
cp
630.878 174.438 mo
611.478 174.134 590.355 175.663 579.91 176.946 cv
579.166 177.34 578.357 177.783 577.516 178.255 cv
578.554 177.5 579.608 176.765 580.679 176.06 cv
580.426 175.732 580.02 175.258 579.87 174.94 cv
574.095 174.8 565.786 175.462 560.366 176.245 cv
554.717 180.282 547.948 187.049 541.674 194.246 cv
541.272 188.239 541.468 180.593 542.615 175.745 cv
542.435 175.393 542.096 174.919 541.805 174.624 cv
537.066 174.749 525.015 175.877 519.522 177.033 cv
516.984 178.213 513.447 180.573 510.299 182.886 cv
509.198 180.695 507.703 178.194 506.463 176.583 cv
505.866 175.708 505.293 174.963 504.807 174.462 cv
489.903 174.269 475.126 175.42 464.723 176.605 cv
465.038 176.318 465.352 176.032 465.627 175.762 cv
465.37 175.461 465.099 174.987 464.817 174.642 cv
445.416 174.339 423.036 175.867 412.591 177.15 cv
407.853 179.662 401.823 183.898 397.301 187.918 cv
397.447 188.327 397.853 188.869 398.11 189.038 cv
400.303 188.585 404.733 188.032 408.868 187.537 cv
407.39 187.984 406.033 188.416 405.021 188.779 cv
399.681 193.519 390.234 204.832 385.386 212.042 cv
385.528 212.368 385.867 212.91 386.195 213.162 cv
391.541 213.411 400.906 212.261 406.376 210.893 cv
407.645 208.703 409.549 205.619 410.983 203.882 cv
410.787 203.632 410.381 203.023 410.174 202.761 cv
409.712 202.759 409.133 202.764 408.478 202.775 cv
417.633 201.605 428.48 201.245 435.323 201.106 cv
438.565 199.083 443.408 195.076 446.159 191.81 cv
445.934 191.443 445.663 190.969 445.35 190.689 cv
437.799 190.859 429.609 191.316 421.049 191.953 cv
423.292 189.564 425.945 187.212 427.367 186.167 cv
436.278 185.08 442.732 184.634 450.5 184.635 cv
449.213 185.642 447.975 186.666 446.836 187.679 cv
446.95 187.989 447.289 188.531 447.645 188.799 cv
449.863 188.34 454.368 187.78 458.543 187.281 cv
457.005 187.733 455.586 188.17 454.556 188.54 cv
450.561 192.217 446.179 196.776 442.815 201.159 cv
443.903 204.648 447.356 211.217 450.039 213.183 cv
460.382 213.31 475.5 212.538 488.38 210.581 cv
492.322 207.739 504.842 193.98 509.954 188.119 cv
512.891 187.748 516.492 187.343 519.682 187.005 cv
517.8 187.539 516.06 188.07 514.966 188.49 cv
509.302 193.06 497.974 207.413 495.142 212.047 cv
495.302 212.368 495.641 212.91 495.952 213.168 cv
501.101 213.425 511.049 211.872 516.162 210.722 cv
518.68 206.316 524.976 197.682 529.909 192.1 cv
529.681 198.03 530.263 208.003 531.292 212.066 cv
531.329 212.436 531.803 212.978 532.101 213.187 cv
536.993 213.022 543.376 211.904 547.533 210.518 cv
551.293 204.702 557.514 196.435 565.41 188.623 cv
571.237 187.486 579.102 186.634 585.01 186.032 cv
583.482 186.467 582.053 186.896 580.976 187.283 cv
575.636 192.023 564.902 204.832 560.054 212.042 cv
560.178 212.368 560.516 213.045 560.863 213.162 cv
566.209 213.411 575.574 212.261 581.044 210.893 cv
588.093 198.723 599.743 187.301 603.322 184.67 cv
608.413 184.338 614.879 184.338 619.487 184.448 cv
622.905 182.739 628.642 178.55 631.688 175.558 cv
631.351 175.19 631.216 174.783 630.878 174.438 cv
cp
.25 .25 .25 rgb
ef
478.444 201.238 mo
468.775 202.289 462.219 202.984 459.308 202.808 cv
463.064 197.219 471.211 188.396 476.092 184.807 cv
478.266 184.542 489.403 183.246 496.316 183.055 cv
490.931 189.515 480.303 199.703 478.444 201.238 cv
cp
579.91 176.946 mo
576.616 178.693 572.183 181.273 568.266 184.034 cv
571.869 180.762 575.751 177.65 579.87 174.94 cv
574.095 174.8 565.786 175.462 560.366 176.245 cv
554.518 180.424 547.468 187.527 541.012 195.006 cv
540.429 188.802 540.535 179.994 541.805 174.624 cv
537.066 174.749 525.015 175.877 519.522 177.033 cv
516.931 178.238 513.294 180.674 510.097 183.033 cv
508.778 180.124 506.356 176.057 504.807 174.462 cv
488.709 174.253 472.749 175.613 462.301 176.89 cv
463.242 176.107 464.105 175.341 464.817 174.642 cv
445.416 174.339 423.036 175.867 412.591 177.15 cv
407.853 179.662 401.823 183.898 397.301 187.918 cv
401.464 187.056 413.707 185.836 416.651 185.334 cv
413.242 186.242 407.821 187.774 405.021 188.779 cv
399.681 193.519 390.234 204.832 385.386 212.042 cv
390.731 212.29 400.097 211.14 405.566 209.773 cv
406.835 207.582 408.739 204.498 410.174 202.761 cv
407.729 202.748 402.012 202.945 398.98 203.19 cv
408.803 200.758 425.295 200.172 434.514 199.985 cv
437.755 197.963 442.599 193.955 445.35 190.689 cv
437.224 190.872 428.363 191.384 419.089 192.1 cv
421.497 189.318 424.883 186.277 426.557 185.046 cv
436.316 183.856 443.124 183.432 451.944 183.525 cv
450.14 184.883 448.396 186.292 446.836 187.679 cv
450.999 186.817 463.242 185.597 466.186 185.094 cv
463.027 186.027 457.356 187.535 454.556 188.54 cv
450.561 192.217 446.179 196.776 442.815 201.159 cv
443.823 204.457 447.305 210.871 449.229 212.062 cv
459.573 212.19 474.69 211.417 487.571 209.46 cv
491.513 206.618 504.032 192.86 509.144 186.999 cv
515.518 186.193 525.05 185.225 526.616 185.143 cv
523.398 185.98 517.477 187.525 514.966 188.49 cv
509.302 193.06 497.974 207.413 495.142 212.047 cv
500.291 212.305 510.24 210.752 515.353 209.601 cv
518.035 204.907 525.005 195.416 530.047 189.927 cv
529.529 195.204 530.123 207.451 531.292 212.066 cv
536.183 211.901 542.567 210.783 546.723 209.398 cv
550.483 203.582 556.704 195.315 564.6 187.502 cv
574.179 185.633 589.271 184.534 592.109 184.049 cv
588.95 184.983 583.776 186.278 580.976 187.283 cv
575.636 192.023 564.902 204.832 560.054 212.042 cv
565.399 212.29 574.765 211.14 580.234 209.773 cv
587.284 197.602 598.934 186.181 602.512 183.55 cv
607.603 183.217 614.069 183.217 618.678 183.327 cv
622.095 181.619 627.832 177.43 630.878 174.438 cv
611.478 174.134 590.355 175.663 579.91 176.946 cv
cp
.129412 .129412 .129412 rgb
ef
496.745 105.883 mo
485.71 106.348 474.576 106.826 463.367 107.324 cv
452.205 118.372 436.151 138.762 430.38 147.593 cv
440.947 147.608 458.457 144.831 467.788 142.732 cv
474.08 131.721 484.087 118.816 496.745 105.883 cv
cp
299.345 123.763 mo
296.457 121.5 292.975 119.044 289.138 116.532 cv
274.867 117.452 260.98 118.405 247.59 119.39 cv
251.17 121.777 254.241 124.075 256.498 126.126 cv
256.432 126.136 256.361 126.144 256.294 126.154 cv
256.879 126.637 257.439 127.114 257.946 127.574 cv
235.459 130.78 195.726 130.591 176.774 129.981 cv
171.848 132.679 161.854 141.647 157.489 146.618 cv
189.554 149.054 253.837 146.684 274.261 143.358 cv
281.027 140.236 294.423 129.133 299.345 123.763 cv
cp
669.433 99.328 mo
659.305 99.6851 648.525 100.066 637.181 100.472 cv
626.961 109.612 607.026 133.314 597.16 147.612 cv
607.897 147.71 624.469 145.586 634.452 143.091 cv
644.524 125.701 659.367 109.097 669.433 99.328 cv
cp
596.663 107.087 mo
581.448 107.495 564.997 108.459 547.81 109.784 cv
546.703 109.917 545.843 109.963 544.757 110.144 cv
546.088 108.606 549.178 105.223 550.695 103.695 cv
540.061 104.111 529.238 104.542 518.255 104.99 cv
507.901 114.766 491.669 134.252 482.477 147.612 cv
493.213 147.71 509.786 145.587 519.769 143.091 cv
521.938 139.346 525.051 134.273 527.682 130.767 cv
522.177 130.846 513.325 131.184 508.265 131.594 cv
505.998 131.833 500.731 132.312 498.337 132.663 cv
501.178 131.45 507.595 129.917 509.576 129.482 cv
530.084 124.975 559.633 124.189 576.695 123.844 cv
582.573 120.175 591.125 113.189 596.663 107.087 cv
cp
441.342 108.323 mo
430.362 108.828 419.359 109.345 408.37 109.882 cv
405.314 112.903 402.374 115.892 399.655 118.745 cv
399.313 119.149 398.634 119.783 398.091 120.326 cv
398.136 117.656 398.589 112.316 398.907 110.35 cv
390.268 110.78 381.647 111.219 373.071 111.669 cv
371.158 125.127 370.494 140.448 370.72 147.597 cv
382.547 147.43 400.238 146.507 411.739 142.621 cv
418.375 133.371 428.77 120.91 441.342 108.323 cv
cp
369.291 111.869 mo
368.257 115.268 367.314 118.759 366.634 121.855 cv
360.054 128.262 351.743 137.612 347.76 143.154 cv
337.396 146.082 322.164 147.596 309.875 147.615 cv
309.031 139.385 309.956 126.265 311.221 115.152 cv
319.975 114.621 328.848 114.102 337.798 113.594 cv
337.668 114.86 337.487 119.271 337.406 120.461 cv
338.085 119.602 338.628 119.104 338.926 118.735 cv
340.633 116.944 342.426 115.1 344.279 113.228 cv
352.556 112.765 360.904 112.313 369.291 111.869 cv
cp
level3{
gsave
clp
[-2.29498 -48.7079 48.7079 -2.29498 414.62 147.578 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.529412 .529412 .529412 ]
/C1 [.886275 .882353 .882353 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.29498 -48.7079 48.7079 -2.29498 414.62 147.578 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~LPLY@LkpnEM2I1JMi3LPN/`gVNfK-\O,oBaOHGZgP*2#mPE_;rQ'IW#QBml(R$a8/R@0M4R[]e9S=H.@
SXuFET:_aKTV/!PU8"BWUSFW\UnsoaVP^5gVl6PmWMuksWiE,#X/rD)Xf\b/Y-5%4Yct@:Z*L[@Za7!F
['[6K[C3NP\$rlW\@K/\]"5Jb]=Y_g]tM+n^:q@s^VIY#_84"*_Sa:/`5KU5`Poj:`lH-@aN2KFai_cK
bKJ)Qbg"DWcHa_]cd0tbd*^7hdaHUne'umse^`4$f%/I)f\"j0g"G*5g=tB:gt^`Ah;7#Fhr!>Li8ESQ
~>
<~LPLY@LkpnEM2I1JMi3LPN/WaUNfK-\O,oBaOHGZfP*1ulPE_;rQ'IW#QBml(Q^F/-R@0J3R[]e9S=H+?
SXl@DStDXITV/!PTq\9UUSFT[Unji`V5C,eVl-JlW2ZbqWiE)"X/i>'XKAV-Y-+t3YHY78Z*CR>ZEggC
['[3J[C*HO[^W`T\@B&Z\[f;_]=Y\f]Y(qk]tV4p^V@P!^qmk'_SX1-_o'F2`5T^7`l?$=a2l?CaiVZI
b0%oNbKS2Sc-=PZcHjh_d*U.edF$CjdaQ[oeC<%!e^i=&f@SX,f\"m1g"P07gY:N=gtgfBhVR,Hhr!AM
~>
<~LPLY@LkpnEM2I1JMi3LPN/WaUNfK-\O,oBaOHGZfP*1ulPE_;rQ'IW#QBml(Q^F/-R@0J3R[]e9S=H+?
SXl@DStDXITV/!PTq\9UUSFT[Unji`V5C,eVl-JlW2ZbqWiE)"X/i>'XKAV-Y-+t3YHY78Z*CR>ZEggC
['[3J[C*HO[^W`T\@B&Z\[f;_]=Y\f]Y(qk]tV4p^V@P!^qmk'_SX1-_o'F2`5T^7`l?$=a2l?CaiVZI
b0%oNbKS2Sc-=PZcHjh_d*U.edF$CjdaQ[oeC<%!e^i=&f@SX,f\"m1g"P07gY:N=gtgfBhVR,Hhr!AM
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: (\700\753\745\752\761\740\755\744\760) ()
%%Title: (swift_font20170330.eps)
%%CreationDate: 3/31/2017 12:29 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj26Bp\49*Y%ta=>Ykt;?+j3]""IFc"[TpE`?o:AP0GO=hCnl#rAhVkh+;6(c&>C1-@1NB;I*;ceCi0Il@jq6X^*NEWYapR
%?gEPKO]Z``/V/E*T78CC4=_HKc(6Ok?]T$*d'!/oej6'3n=.ZrX^#Wuf+XRE?8]"N?-kN:ik8\Of7#!nAZp&Ac_P`cdsS.]kA-'7
%f1O,[`f7te5Q&)a:XK1;bjG,g:5,-sr)S^k6"BN!LYM(WPZSe%/q,pfF`Ckpo#*G/qVS+KXV9G)l@03A1jo;0KOIb?;GDN!f=cpj
%.b1OUd<\.+haRAsOnI&6G.FI#PN__7O0,5]L0.4;f?r%-V^*i\n6[dBX*t^WV]ksGCe))HI_o_\@3eN(cbVm_F6KWVe.SWI?gGN1
%@UK6X#iS2R]>oAs?M7PdDkh#\8Lq'GrepagG,G5sN^B1+1U64I:=:j1[UCI.ob9t@K:Z?Mn@t=f+7"br^/sqG_*4b8XeX>EBKlTn
%$(;CZA\[cH>&"Yte3L1jL:pd<0@R#Ya7El'2a%3ersX2nH]8EJ79!G@\$6>,$)]T&bB@IKqrr_S752i4h6.mOhXEj5>q=kZ#S\L,
%FA!s6B%Y``$uZF*18.2r0H:cOi;%>&)gcWk"M3J=?'MAT_?@GD):7epUK$TCY-$03r.AEK3g"o0pb,`!!T%SeeSsnB5L&O`Qp==4
%*F\5<[@!pnYQIVtReCG-`#7[j7IY0g(]KGLB\*>g\Dd'kN?0KJ1%:fb]N!cKV[)<AIC\14[Hfp)o@fgd/>e<41I(EL0=5I'g='M?
%s6M97ZBSHR0m*B4OP5P"dQ]215>+pl`/=iiU1*<]5,#\EmGJB"IF,q$(:@AHO)<@uSb\FTWP13$EJ1ZQT2=FnZi"V6J"5\YgIWf9
%#<4Fp?*+@tZF0,S/-/#[!!rF.)YBHsfk*R1Q)fB.bI'Cn=2W$\^d6YSHAr&WnIOft9+M\VD'R\qa:?mH6L=c%_*bj[SLqEG1LhSW
%lWpSL'-G_<QV-.&e9BJ.[R9,V0iKr6m?W6d5Bsk9Nucca!pt01>c(k!E0O!@EfLKddTNYghCV_4<l/][U\1D5\>!>SMS@\B;K2n(
%](0'ZbPkq&epfIEJ_.IYjloj)c$rJ$_H%1&.H#\+m!k@anD./%`E?<_,K*qG]_Z3=O@V=ac-+%FX]GE)MpruI)3Um0OYCAi>s_pe
%8@eh=itkAS'#)W;7G#`+`G/oN5g+(FpT&$ZINbMud1q?jKLf%"*Wll97^\oh.O^jcIP'pj9$,WdAYcAlnpkd8`Xu5q="KKJ*h`kB
%m;qp;,>l!U3f>;3Ndb$SC?8@"_RL3ZI\N9kd:.8nMNAD&-;f"e6d\E$gI/so&HO%2qXB20FKHH&<ED>6GVa$>1oN6ooqb".5Pj&L
%q;[]'CULVV8uoWW'o<9X>$e$HrYAk=*>KF%rBqntNf5*8J%$.j?lg_J$K3^,F9E9o=Dr?g]<8Am%9$3^LeO[pR3;G!;O-U*`)4.r
%ns+JNHC&9!p/8+O73Z>3;[(mt2EK%F%Xcc3JTXR#HIN"'?2a@*4cum:/bJFb="KJb^J7G,[D7tP;/=Y1m,?ZAi7V:")e$mdA_7Wu
%0)h94gT*A,ngZM#_64l??-[Q^cTaVmq8_WiJ!e+&N4b9/Z:;i))_&Z^*(#H,Q8(s8#SM*%4f;rcN1SU!\uRp(X]rB9ladXQOV8Up
%(+J2L8(bZkj9,jr%"o1\QIiEG7S@O"k%IZ!1n$t1ApAc#Gj\sU20s@laYOd$6e?F>kK39gh74eC$g(?njo511B>g;hqMTXdcHLUl
%gj02d"^cH:$Ift^cPhP@JDfQI">GV;&"T3Dct`&/h7o]QDsT\F@Z3KcmYoBB)(4HV;OMVRPK@EWR=&&Y$:99*27$=aB'l[`FgJ&`
%3h+6'Zajm9Vr^=laI,%=-ZaIVagnr]/tL2HZ8odI/t^bdK$\2lc+K=.GrtKUh0^]EcI:-cqYEE>\!^>X9fJHq&5KI:"RRbo&/[Bd
%1o6\KO%EP5FF-EEcm,+KMPO)0r-g@GJ$BiRrF3ikD#BF(7>%'f=[]^&_7b,^P8TdS.Ji@&8(pj5MuK0.A3Bf*`8?5r.qd6N=rAi-
%V(C5=rqs[>WLIIe(9&S=6J<Y?B4fDIR5S!@CH=;31bI058Op]2JgBlAM*W@3Yg*T[#.4eA#Ha`4%XK8'(9C!-Vn8\ERYZ!qlcOA$
%VH+L=+9(aJHc.@6fdFuL!^.*+4T[K!"G"<r(^LJ',76jhJld\Y+Ag]"i<V0>E86@_1OpZ!Op@X&#aANV;[afP,D<S`&`C?;,S]92
%O@,7"R"rg7<%+G4;+_"Dh.>R5Y^hL\OfW(E(@,H54,l4!["f2P[c9?MPB,)H`lU8%Osh5#<2V<,Bfi,+]8l3g.6$X+goQtiH)%2=
%+itl!>Jqe1b"9.C<%=H]Up;G$JE2h^!:*$6<a)Bf[$,[^WH:1l8S?L4P#Y[TOS1Oe->e,=+o1:C6cGl#Y<ZLp$5a&#Tq_OP5S-dP
%)U\Wg3iBGeW?$%Vm?fh04%&&W6;q54^"L\tat;ZneiKE:lh&rD^"o$_U<fI<V#kZ>?K:49Y;R#OIoXWkqJqjK#'.Du4)6Gp<iBN.
%dI@#0'J<&?@`,Bi%m@2+;f-Zl`/iJF`..$p7;ZH^Z$&N&<\Jd2I.teNT[-si\l?A#l@GqbC8M`!T.rV+3B7Y,.UrHul'F"T>;76,
%4&.^o57gAA!DUpZ;S^dARhSFPO,*(lfq%_j1#VB^4XhdX4/XH\VM,%4'f@\Q;_]?I;DAB;kd1s5J8#[ZX`ia+?1t<&Ilo@5;e*)[
%)15lnN<c<=2r!FRdO+<?.<);pUK4?o(aVcu+>p\OC'`hgAP_bd!N2!6WnOWB(L#\i=?o;::J>1E2/><VB3s'52uIT2ik.89]<?]X
%@5A5lE?,2B'nCcr:2!%]If2H(Z%sf.8!.GFkXVgJdFqI"h'i'Q._-H&U0%Ci%\AdjMuZ_Uq[K`/CW$4LgNCC2P,VIH[3k&o@^+$o
%=p5jSitnqcp!49jF3e_R5aZnAdg+1RZ^V!AcCB6)k7*JgiUY/qWB'_?L&s1*m=$:!0fX+VICg=.UUb/!GO=Oqh;#E-]68[b;CnUm
%iu4tRZ#iL3n(\o_rT8?3afcSJ$1"KTq5>'n7Z3p73';$h(9boScTFS4k%pmf4ba,ic3JFMcq/MG->taG-siUoY-`1d1'U"kc4c*U
%,fGG?-%n]O[06H_T[391"qEAJLR16F@IgY_jKs0Z5;-#,X1KE3XR:G;CcdY<O7\tWB]J_VPWZjO?SVoI.C?Sa`4VERTUklpYtW94
%ho,:A%P5S$UfX'3d<XgqhTm%32#Lt/CW)0GW1K1SWECm@ilLnH="`FhGmp(O>pfdiaeuE\VaSBP(/$Vg)b2B"\k^b/nZ&EX/4DXS
%hS+#n;s!kPG7.[:ZgpY<22fjV4&/naR.\4\phl-pEQr1kl/&:Em?RUPpr0\nDDk-o2*DkX=c`YC#aA&3kV"969tNC^SIrVn!)s4k
%IJ`D/o(O6Kl.HAR:8\e^D$`nL%(I1W9t`*6&]VG?ZR8ffg_-efC0am<<ZE\IZZ7Y;7a6km)C()X2(D8T6ZhI41QE%P#%P7=@2,4p
%0SnJY,\JhDEC2a+';[P-4l,]K(I!p@aUG=U`B8o<cQUVUaM0ck*93:24GV]8Q[''dOtmDJA6mrG.DP"jj*BL+Si<8(NN_s(B-hJT
%XK`QdmQJl8ch#0J]^\+&4O4tmo>^AQlXGgb-CX>A3@UXH;MT8a95jQ]=__q&>$S:XH;=mJ@d3g'*ToEEbXh%:q\0%$WE%'YXMt9U
%i/+GjYFC@8M*UWq?O&G0O>;jS;hrm)h@()#W;[$2lD82n#P/5SoLHt:%<#K.I)!6YqV0mU<K!]3g;`kbXmEMT)Lc\$f'o[a'.NP"
%fi3[N@`b'ar+qh]B@]1o2NOKTj(H-BKq@E$R>d8to#pZ0bQ(A5n&-K@'*BTMJ#,b!f&]\uSeDU_A4u8TmDcbhCZTamKKZ<j5ip<;
%g#%sSOgqMJ,J;Nh>a36HX3[E"%NH3fpr..JKJKhfLb[Q6)aobl+.6k]$W`boX%o8`N<&</1(V%A"#%DB#(\Id$G6L=(llAT"#'8]
%b<58L&%p*g0D!!&4Rb*:]M)DbATGBTp=/n39`XE+E-PtUJoob-WS],`1A-4'>BaSrD\%Xu;DQMjKba,.Ml'hggpXhpiuD0nhc;Hd
%ql4esPt&baB/.8Q)_S.H"2hKQ<"\<!NW7^$("7*1b^b;(0=.N^2pQ>^RK;5(^VsouPiMZWVq\0jB//:m!uWi._.e@Ne"k',<SW1-
%]Z(%_g0aDch6**W`WBfPP#hhEFPR47al&mHW@n4fNF8'J025AN'o&3n9O7UXS&)2ag+[l<FnHif"73HbBlD\4(GXd53ktAtihkk^
%?[EB;b_gBKP2ZTrP$;r:UNV+CoNRuaL0omB'6'GZ=YYs0?C[\aXu>M;#d=3mi0eJfF^D6$MQ0p,rN,?#Xu6omWE/a#V:Nt8/K%34
%reu&k8bJPeh8QJ<Sf(ZB':r?8UHAg#-Fr@/BUfr2YJm?ABf?<8?2`HY[W%\%?Es2KF1Yu;CtB-O'$&q=T$O"ckr0QED18D?NFhfO
%+Sg!plYu-=oh%Go$P,lJ0m(=7*L</0qcSB7q(st,V<6CsbcSEi.ajk*gZMqnWRGV:c1Z9A2n2ZI^NeS[gaJU#UM+NYrUPZd:QUVm
%Noh_1k7RUu)0tg]p[=/Q9tqCPD7,5l'BE(Ce)i%!8(65j"Sqruq/&rgo+U1`WuL4LaQL-Sg@WOplc/`$o%U,_B/,#9pPMN%/#>gT
%m*/:g:YX1m*[>*:p>`Wb@O<P`]\sT/?MS07'IQ_QSf:<=S`+3)!']Man8Z'[eh6jM3*0tCN5\f!*OSMA_Ph!Lc[d).4"ce.]b.!:
%pV]b1(j8T\?.gU>q]6-FB]hqfQ.09=:sZeOT5XM^g-i)`NemE%T<Kd_bA#EWaX\DA(ZTgsR?6AdOa9qZ_F6d!rXShTBc.F1IuGU,
%_N'h3Gak:B?;mm_dj`+RXg*'jY>)Kn\6[\5/Nl,f03n0)8KO>r4#0iH(dh5O8]L3,cqFS4rS)^aFS-I-Q8(u!TA`EirXOq45jn+G
%k1\=CJQl2`LK"='%PH.G1oFusLu;ll1\JBo"Xh<X]:%'<+rTR"e_Hgh*$a8d%0S;0GO@E\V8`Yu+4I[9/ak79m`n4B;GY4:nM@t!
%i^W9\H;@Y3jP/5%iCo,kgI,RD4/!s<4.0s3a_]C9->pRP92DoSKO#Q;#sN6Oe`M.I2_[oKc/89rcI>?IDJ#e@^"IZ]"!<Ec->Q3!
%6Qa3hLJ-K%jmq3Eq7H8[0<tF<-'l;["h3dY8cPL9_?`5J*K1lKo`_OPM.,u3p:%`j_TLcQ07IKgA:V0aOnX-pn#R9#`Z`*r^\:]c
%POSBlWg0JVlo4i7m<]7m:C;K6D;V8Sb>Z.$kD`Xk%OBhHEe:S8@oL$,Tj;B!]f82c:Zoh'-&V\IW>b*B`.hXn]iI$d"uFtW;P:u@
%+471uB7J$2N8M>*rf_r^)Psp;KkI[!X>n>Ho#a20T.rSSH`?*a@Tlg4kG1?mQ`@b9j8.M^="`jiicspSY*/pEpq#h23V;8FMksHg
%Ua#-`Ue]O`W@9o`LK08m?e&U)*ks'2i`/X:=R,)D"_)*BT[mtlTJ;bQ0^W3@n'%BI:6K$,3ZV!F*)tGX.V\ge<FF34:(4,&f1DGI
%?:Je1%an2BRDqHi4,m+WJ(s"Do<V/4T)2T7/r&b9gNbCU$KaH0kIJu&#?J,f`G8@MM)<E@nD:+5`Vr4U('=^LY?5P[aTI2:-Y3_D
%[`atpV/&Dp1N).>eJe,(>.Jeg,D@k=I(rqWagpJjJV(GnRnLK+jI:V?\#O3Oj,#)-4Tg1.Noo@&&LZU'_94il)$bsj5MeJc3ZY+;
%S0+S:X;>gZr?_],Z4G#/Y]NlKBLhFk9A'c_IB(-ti>8qJ)Q,^bQ5^4@lh[T*0-HgRC;"n+G.KJbE@q9\p04G4aZFj]GF\]Bpj[b7
%eA"i4'7CJ^HHc*m2d8N,]c()IS$W,Z.uT=j+g_$fmb@EGmeQ1Ms4a``?F;UA#)]9@VBN<K?qbiF@o\Qp`rBLun\9q8(^IIsr2nN@
%U<%h]8>k=o\TRX=r)ObLP4E:p09isIa%SYjhmPB$r/I4F/C3Hsj;^m4o/C^hp3i=CO`UAii1!-8Ds+Mre$^Lm2f\i:<Qsc[k1<#W
%\=R2:Wq"D%1/mVXgp0h;(h[aLV&Jr'NHq]#n%Fa1B&pb?AE-_$B><VXI'_iK9\[kj`^&tYCs(O7Rg!/9<EKX<T["\j&5uos+H6-L
%NKMR]q!?"M2koi#mrb0i4)5nbQsri<`\HIu6t:hmj3/_de&(pi3hd4AcK5^u.G(ruLrQfZnTdN4*mp@;LrM$VMrHYM7%rG>BLXOl
%k0]-%N+VRuT"&Q'W6^dWNGqFfmc:\@q/(e7/@NQ(OWM2\St?pZNR$Gq"6^L\3Oeju=>;qJR<pNOQIMeoPu>B?HC_fP@6aogndnY\
%OZ2sLWqi,!k5O5mhjaLi;[q%-hj\&(08<nYg\nfipbM$Ca#?($?]6Jq)>*]55W*c\jpp;(iTgYWmdSIA^:8Bnc+_6-)QPoBg3p\>
%G2'Zsqg:3ao3(?BIJA*_h_]uNAc+_VOhE0+0oEJRls2]^V&K5T^M.=9G@oYT#<WKYrF5Tm].D>K^A2Fp`[4D]F5]!5@fKXX]]-j5
%k/-HAnb6q=3LF"nZd*#>"LH#''C]mg(PC''X&j1I)D)_99g,]#0c4PWf5GdY0Ld[Djt_L-W:)(MGs^c>(f8H*R1iO`W>K?&bb\CC
%qW/s:lke[W@=sV7M?4;ujEb\Rhr#_X/LI>Z$[jN6L)<F2RW2]Y2VC$pS](S?Ak\gV^s%\*P:\ZXAZt#nr+^#nX3[TaWH^7)N.g2,
%GWKi#CYArYQ3dL;#!Rp9O5kfQO)^-FYiEZF/k/NOG%=hd?tMjIAafoX^$C?iFN_-qHSOn3i@K^Z4Ytk*kB3m+n<U8Wh5&e3SoW]W
%rVsimS">thj`ko>jf'TVo1#hp#7g/[.6+?8C5ab7$AEZ"I8(>6$;e,$Uqhj2,bj4NPJ:W^`^AD5Iq$FU.,ultZL]_YBs=8fUd21o
%J5V>I1SX.l.58F*&+=->:e8j>]LGSKXEmVKUiNI"HSKD,/9p9n?7jG+>EQ(P!ik4cD]V8$'T8egl$FtTd-3SG-Apc]fAcSi[0_0q
%?F<ahV/'+\f*ZE3Krh>ai^VL'i1Lg&;^G$U?tL^40s=!5VYFsYb*mW_T3%c280s.L&L!dW;Ns0%2Zom)o=NML>lDl^;.dEU-'k'g
%r`YOj@5>c?dq5BkV/Vo=;;qR3.uqof(1l3ISQf6T,5q\P.#$DTM\68^=cm^1?AfG30;`##']ueOdpJ"GB9Qq]l[NK3Aeo/s@dW7d
%UrF\SEjf>F's#2e^([hsj2UG%`,Ar#,ZercDDgLUbR@-M?-Uugg%/8Yh<8P'bhW0g)dfI%&U=5nBMgVH\$t5`g6oLEqe(L5`nS.E
%]:b(5K"7PD$bEmA,=/f#g(E%QY$1/t4DqLPFS`:D4ePYU1skN&d%3]eHh<dls*.]0mi;#V6+K]Sp\FAbaJr_:bYP#RmH.thc`;@.
%,Z=@U79\`]0,*X*N)qWu/eeBj?&rd/nf%IC(G:Jj]sa.r"q)UtHC+4B5T?sl5VQr,p^V:kh+S)Kj+$j)X18/4?bWST9/TmCXe01>
%8_ig0>5M1YhnTk_+&?]]T@fH'SCl8_%jlb!J+Qml(T'Zo/c&!;g[Z$*(Ck+4?QGC]os3Hm8k\O28!p!chfg,F%d?L32@Wq>d$)n"
%K]D!CmV9=!*umQrbbPb9(q+>TI*aFbd1btH(e4^=^\`lFT$sU@eFnO!R+P&Zr1kWrJ's[=?mM2P81Qgl#Tk2_.+PrF@g"%:;1%5d
%rDq*CclJVW**;@$NA]IN/U=<n\;k"H#M1l1*@qrheV1l=W@R>(KM>[Ls$P#!(1@si^AFPVPIM/%q8Yd0(tKL!Cb>!K4)&2;7G.JZ
%DMB'9\(0t'+HTqo7HQ>l/,afjs'@f7<p>RFRDRK.[UoeZgAF6/`rHU40"#A5aG1pk>/?:*kq3iq2Z%*f[9ICSrWYFn;PY5pDt5t]
%FT1jpBB?3q`_c[g.d?h68'MTqQE:nU88i.S(85X)F=h;/\)Z']b@0@ooN.LB?\5@Y@4.)hom4Mo2A:!^9.`B5s4qVC0b(1WKi?1B
%&o39:8)4^R7^GifY4S:/SPo"M&6IQJrbD8"c3$uS1b<B5_^))nRVNIT,AOIA(P>S`O*$10KIr_N4r4Ymd)!OhR\LO5l'<+PFVa8r
%Ki:n.`lj]%;mq$@P^@'a^--jX+'JoKme<\q[FX?E7!%PQOU/\J\i;an^J3egWn/.@;B(J:d8=^fqZ_=h]XO@i,,1o62A<9`r_:BF
%]jn<da(mWH<oS80oN*`l28.k4Wl<\Qk&C*i*V[35"?ZQhQd/4b;X<N8q(fAScU?J;>[91*.KAnJG,g7:RuH'FHO&M1.c6&1,T48D
%%):hpm(V(Fq+m-4%`YQ2<C15DG$Z\_@?Tgo9H7.UTtJ/7./\iYZ?l#]qi2!)r:7J0W)^ZCa(4rkoPd"g7ZSG'A,=G^F2Gu))a+t"
%2VBoGGt`C$H%W$%^GhSZpE$Yma5i5O14uLaDH\i9<;N6EcPtL.+%]^cd$76-J+PKl1sP<+;Z,^4j(-Xq4i#luJ`bj<cksSZ@it&6
%ZZF"hommPlM3=QsT5E3E!O!5d,jeqO("=0#6Z\<=5XN:O>U]=2L@*\I.G7PUQG[S(7;hQ=7s2"#qY=9r;>OY%g@ED(7:>ROJLICP
%.M6p5l_\*#4C;l']N4r1^%!$n_HAn=">$2>]_ZX3;"s"b\,11=/`&ebXSZ1lIb?l3pt],I>Db*=A-G?';K)NXpuQP&J!YMnO5bF.
%D4A0ACN-#N^.`JhcSYjR<FDfgTUm0UVuEr8s2)AS(/F`AC&\i]V?8Jr`D8_:Oe.!:GPZFjd=1FM!aA$22*+2pSNB]CIqtEY1s;h2
%;O:^F`fnJ)H;JIMIeOc*NNl>@lARC9L.sb1C%hNeo;IOhV$HZDf*YUYfH<8Z,jb@X$2<ljGZNgJ?&c&6U:s#O`-64hp#$QR]DkKt
%pub2Y2W,L=A(REKjIO7LU5*<ug$+>,_TdeOqY0bo!I^kuhuRJah/(Uk;]u'g.uCDf4iD%H`?@F(:T=?uh].V?/,jIjkB=+NoDHWC
%d.[r>ng;#W>I4()[V^mU^,gShj)+RUM!S,Ce&Htr2?V,1pc0WC`ITGo.q!W7QVh[Dd]a$l36#(a@_EA>=4)FDlkI5NqTpJG3if[0
%[+P&t>PjCXN9fJJ0nU!2N>9:h;3dsHHZ=P'Uq@upU,M)u*X&pa`eE:WitXZ/=9LARcr?,,iq%fXFr78!:HRa9Z@?`[?D+(LDcIA-
%?Cq285oB^\nq3lH%$X2m:BcH2(Qc%NX&LPH04qF6dX*J%e&K8f=3ga':*t&/W.CUO5rnGY[(n^lM4^'fNDtV]69GI5G+TNUa6[EO
%;7f(J6]>e2Go]'HVZK>#XG6T&p/D5[#(2uU;ZYYJrN"NCDC/5-+.*s&ColXpGJbc@p;p8b.F8d!KU\uq2:$bG`B#Jtb:@n@;()3X
%Z5E<X0BQRqaQ1<Lb"-H)N,FY^Ln:DM]:R[JWY]MI1tLsZHG;(*mC8#OG,sJ;,n@V#bARM/P;r3([;rl<L"h#dcYm-MHQ\dV**cOY
%%(T:/)i4Yp&:Q-5<n,A0$S?ATl.Fqi<kn50=,A`:m-u*/]qV_!R6nG`:D@OLr;Mspp_P>GlaP.8*^R3*htZUeC14)JZQBA8ZL8Ug
%T>$.u@Q.*OL<ott=%Yn,G5^lY\W;&NB)VA#?>HMZ->LM>i7-I4>ah3s[MlP(^DXA%bPs(^\KTnqWA]\F.jMrXeQ++b5^=T<nV.fs
%@Bj-2p>MoG.hC_!.phhI^Puh2-ST)@kdjhHp?u@P&D1QSe4q4<DUget3=M`.&TU^B6r](RPI%R@RD0;/\f%JpE>)ZRF]S)P7A;*(
%q=R.O#]dl)=4LL5MRFXY,^t0GYFDJ;F[B`I`,@Kr16*ED\(0uJc+;NBc%7cKWCYi,+Gl3g$p$r&19Al"Ld\^#FDTQBD<TWt&aYIq
%A9SJm]11B``79IbTleD$eaHi9W!>hTbrH&Tqj:J0OXl`$?;J8rU+hd710X$jQ.j?hbN3^@2oIQ"W3&P(X<O*KU.D9>+LgGH`>e2*
%A6P$%08B4MfrbG[LD1gBT#1aR/?]A1m-T`M=O-<5Va;M-]l(;Z]K0V<k]FXG8+#p>+U,*4IXBq:h_TmB#j1AHZ0Z-%Z8Yn>)X0Wt
%mdE(C[aRUY;Q:N,X6%W??1eor7O#!7)itl`*kA<&XoG]D0t,7_;D3fS]j5N!Yrijpl*Y\qr:2YI7?iD[.:_h9ggR^0h!%P#nf'[D
%T"`V@O0M#F4\3t*'+>=o>YCjoAf7VLNbe<dWp9PGlc_kKS`XU%o_T)F?`5i>IW5X*&o0.9XkrM`=48BD0Cc\uQIrB^9mF#rE\1Q(
%LI`FsG'4iU9>_J>Pg+gUFT91tjit8q+)Z>l<h:6@p/f^INU=mMqF1)&oDG/E`J9kEQYbNFYFjq;^%JMZgJ@OeVsCrB&,3LNm=LnT
%l$L^-0[4s5f$&Tf?E@i7[l-Dt+)Pkte=0[e(]#%EZaI&bV\/WKhF_-;HaUJnC&1>fdc2^/CbkhU@UQ@pid7-@cK5qom17sRm+5$I
%o>Bi#q=_Epg8*<]ne6;PS^3c!hkn/S+24RcZKKs5Z_=/M\(u-&c)ZmQWT-\Cc0/<*rRO2MD-l<gD65a\Q0%AT69Drl>s,$!(gm(l
%Vu,lJq5:]F]"D$l[sjp_Ch56d&#':R?QN_c@e\X.k0o*(eNgM*B'/^(k8Jbpn1D7NgprVTFhZ^.*Ne2!W^XSlMJ\g%rOTLDa;(dX
%Mj[60FCR,7?p%Od^KgT?]Tmd;3hPrsO.O"0Id_<P;"1XWWO/0Whn;uf$Z4.p)l<F=ek;X-(XqK"V[liJb9u],ma6Z*!+9MVj8#N;
%e&[M-T=.YJ_SaOej1UF0]5mJPAD:nEF!K3`m"jc(FjV)4OF>u56^Y2%qY",\/$>3oCE@>ufR(9@]&KX2p-D-`n:#Ri/$lR-mqls]
%[;ZU*]CSnVHX^W&T9hLo'L/bdBD4U[\50+4"O[tZkT71oUO4S!<Iq.tl)Q,@)A),%iiXUlh:p,UH(,?8GEtHM0TF!eT6V.=6ITU\
%GBZa[AbeoH1\e?Q2YTQ2c`H3AW6t83q@6Bl4)Of8PMD%eI<tEC)!LAIc&L`7Q_/O^4"I2up=!&%%J<=Xmk!ErG6qaKnKE5S-F[-%
%db.PgGLg[r2<>)=[?*GpIU16jYJ'^so=TkQe+2kuX3G;1djM-Tb<d_%E5/WD3n=b%5g')urZ44%r/c:"j_;>Z,t5I0eGB!@4.9)C
%2P,Vlp:chU5KX]YV)5?a[/B"A``oiD(n%8CSVlMfC%L0Pr)TS4q:]*2Hi'%Oag"GI8NZ]\AN=%;5PJZo(\B-@6WC&0`DAD9`q&0`
%@Qn!3C$iI=:-Z1pOrEP@4KE=9*4P@5Nh<f7K@oPFbm<UPh1+%dK=5:2Zu=&aWZP7.6eBX;5,^,G0'2&IgmPVH.-if1/"1tWGb_SX
%Kolj+G.1DJcNVeQk3A9q=S>0=]CXSH!\'dceN*J,H'-h\SDMG%cC[1eG]?d.B8VuK/4kW`_fiUB+2@1Q/mGrK5GXnlhg=.f#b$M!
%iU:EgY80ZY2d^DgfGN?<qV0`^HMdRSkgN.>]70LuFdG&2Q[LjHfP/p^1Sn\TZKPQlGb?_GgNhA(CVsM/:a)Do>QU&T/O+^`iH[EK
%`<jXCK>(XDIC.fk/QPb>?_1o^8rje[C4Po2cXc<cYBI2Dk'4qikF>WBBU[1W/U,XZ83OF[H`?0MaRsbanSL3d\GGnAS:MQSlmX[f
%i8_^\P*M(MV@LfB8'udh]OrJs+.Do^jeHAO`VZD[9bWZQ@>E=6A,F)kB(t&bkYWLa*b<Sq%mTfeKYr3:FQq's"%!(!l4[r9B78Zl
%,_-A+4dmbhp`i\;gU5hZET&Vqo$prRnTX_oT0/DDJ"&K&frAXVV,p(cG6_E6ZS,WI>Kq*KX<mk3Tt,DI<W/!Q[MI<Qk?8Mqos)]=
%)pdTW9loXFfp[?Ym/8)V]I'Y-r5<i!kC*c1Sne7-ri'b:*ZXK=pV1>9>Q,eH(Ya^%%@T*N$U(<I]2+<jcX'e7QJ-GiV'E&DqGk'#
%YsE6-H$Qct+5k0i)Wc$0ChIoio[rK:=BWjUl?/'V3^qNEg@gQS]YQsY5,i7@JSJ=X]2)b403/k_[kR4`Se.Y[iR'@/&^Si"G*BPb
%2!FEC@f:"s#Am\=J8fRgBoW27/"T3prV/'BMghSda+Pm`hSK]u>qC+0\]%jIDt"d.`ji:f?*3I;0_Zi_/,N3F68PE^_X@>h3nKpR
%f?$g1*o!K)@P0m!76KnPfAe77mGf)RK:b<jFpUa5&&+1A@Ae>F>=D1e(_>:'SHkgrV&-hpGD']"MZTkFKfi2AE])oYB,^G&YEHra
%IN]"]IbGY^dtO'a_0QX%CNlqQ`t`<2Tc$2]CAD-bIF;]/&/qF8#WlHbe@'Hip-q0mAWSO5!tr]L,5E\*g`]f(B&E#HkTs>0JDB!/
%'G<`a<k&8uFf979$:_j]#RE@N`3@c(4&5qk:eMWp<?5[udNcl@HisZ?IeZ<]@4_,&EQAttHaC?'hs%$\l</k=4&)&n3Y_+;QU>eg
%RI0!Q'TjoO<&./kq7')\MLmo(1nK>@]sJZB#EV7qHX8(ZK84^K(gfCC+'8!9TbLUT@EUUOF4)[J%G&^i7_#F4lL=`2"e!.Zl?sR&
%Fo:AjPsu?egC)c66kS"EN#5CY<stMne(4&aXUX[Uc>r?t]4[h;?+o,QH/Np8CmTUk0%uTH(hI3>Og#hq-&#"keVge^81*WMa'mgH
%9uG/[2a6Tj;o[AdkNo\MK!``3NDk2,ft#XuF#3^Qkr1CZ:&<@8*EJ5-ViFqBQ/(rug1'N[AXXs\jY#%M0BdASlS,=VG!6ss9C6B?
%#9>%ndXrM0RUIc@_AY.bm#AmJ6hUd\Sf_R:2]dAb2Fbi8p1YoIipEcW_:i3K>\uForC11hm`I@h(+74aVir+_l+jUh=R^;n*K4Ub
%Y<Vh9ZKJE[7r+rRO$ohTD].XU)#E'LIEicN:d+e^/E\T1<!AeL$bT."kHeOQSn:T%jk@_"A`84lnOJ1Mo&L22dlo>6Ye\el+W&ed
%8**O!U\u2tLo-$p$N1W&M"`6f.hqhGnkgcpnK`Id](AtHnB-"HL$Zq[LRH?IpR/G;PK3"*IM&10'R!@(j#gTZ"!mJDs1JYY#L@W&
%BNF.7Jf_O]n,i`OX@0Ta1sM[0o\bS#pb"':4=e22H7Q\38n:TN/,r%m5UnDL^RRK-ZeOs9oCUR2:5;Nl\';VcEF7O)3Z7'[KsQ5R
%Ps'W1bYjq;5r#9>OhGOD6WZj`c^PHJp^+1f+H+qKc^u97bNGnm0D^9)EL6ke=738?FR6m4oCT)9/V<,5j^f!iBYRnF]m=tr-D+Qn
%L0o%:^@jeo6!q%G%^b%.BD&EGh]FJu5@!$f>b9_R?[f;/H5b5`V^1Y<njWCiDjgNbKC^_eXs6L03IR_g^;F<2"PjAmB^<W0=bE`"
%$(QJ^*N?Tke:ARh5PqieLE'Pp^06!^`qpOsE,9H0]Qepm4Pn7C]l68aVN/*C?YOF"2tX6(GMMUM4C2ji4p^U^IIZs8g#eiK?]f`4
%Bh73K(QOuqe%.Nng3EQM)2[nJ<r)1'H2HN8lM.d]*f=>][pIYV-X-eWkh0]@<qci+giC,P5"[Gc:;78X7u)]6*flMEY#ZO[`k"i,
%aI\h!;4!8FfF6m&aC;s,(E`6A#N^qmf(u$m5C*:ndGU,<"=FcH%,qq_EH`XtSDHEB$rQl6SP:.@=1?afI_G%1XCHN7?d/_i9d7F(
%qR9WW]Cp,P.n&Vh>e77bl$r[6X>Y\7DJ($riq2VJ$d)gP=8&7g4grF)1VM[(4qOk-S%7WNniRP7lr"q(8`%5VbsAjdrU%)B`qcsI
%MllYrq1Zn'8gUF/K6tTfHunD_I)^e/P^1VO>Kdh`<e9u6_a`4\n*dQ5+n+eRhk4,u^,Xu]gKfF0VS%7Lb4"Tngo4?QPW_7VT''-h
%HgR'*Q26ju*0cfdXJd8OHEhEXdac$H2qMBM8KI8;JJhb-Z=dS@Ru:L1<O\M[3*c?f?Ma#Ye&K.N'K(0#EdGAf7'lcHCmL::q9t>H
%[Jj>%-f6D\bnkSSZu8_JIePp?=Zb`8eM!*Ffpe8"NHX#9^Ai%-^K>QDqS!MR]/t=_J<%@_MI3N`b8'E7pZCSf#PhnYs8CM<h%bRX
%"^S[2mC]G^]"Z@6Z$>uEYD_D0&$&jXrU;M5n`<d939uECft$9ZqT?:qf)#BHE^2pAYSj)[::<8;]_b7DPMJkP*cHJm,7l`W]k4/6
%Gd"ZcSmV!J;u(;mo.oq"Bub6&aC;JTpmBkd*$1p#[sDgtpHRQI6^gDiQ!\q<FOtqaP&CNTE@9Q?3(`3)6>jHGT/t;)h"tX9lh+eC
%m%i()J^MdA)@5flk0j3^;\8b:mVM8X]f4W=(?QT$\:9`-^%VMu1]b.7P5G0b<T$.-+QBk7\[1q'`V$oUj(%BLpq`LBH?m*N)0\#q
%Ym%M>X+WtJRQ&3L&VT`A?9XSL7-<O\cF\IIjk/id4k4l7X&SLHA\3^6Y5'AL+Y_C!YV'al;_P'R&&-QAC3AXJA%"NYaGkLl[C,h+
%r\e&bC(H&XiMWk#[[sDApNKt/H[K9d*!U0Y9b4abrRWjP@e(dM^=mj(^.GICAO*e+K783.GjPR;Z#Pi[LC\9HJ9Bi+GmUmeo_tMK
%HLY;U,=m:]iajiKXLKcDCKi'X^OLCRQ,ZEAf=kKn&XMg[@[-4bITcQj1<k5RcCR0K/\&E")OpP%\U'U;\p\\<q8r;rRC/7FM\hju
%b(.rJ*NeIFid<JqSiXM'DX#nE;?Y$Uno6kd,V9ht(2'DTo"oo6.N^2RJj(2AYU6\0G4&u=fP#?&IIKG8V6s'4j/Zhg4-*DFq73^!
%KW>ak)./1;T/p9$L4,[aMbD1n[?'_$@7"jI@>M_Sa=ls\;XWYgbBs'O_;8%<Tl-$`H0\gR)<hZDQRN$c8.fsqo]"A2b!*D'8^Y:c
%>FV\8V'4<\bCaZM]MGJ!c5>WLHWMY;1&X/BfKB$6JKfEG\-ajj\ak=GJXC]TrJ50JG16<9q([pb+=J9p0>auCOfD^T5@W6E6dWMO
%gW-VO0RF?'GL?a=3MD$&d^.fXp'D_"L$_YGdEPZQd_E2Zs$S-:Fe;Bm+SdLrp9Mg=bKU=_5*7A'r1g)'8Z%W\5b>trR8^%'^0>gq
%U_W"_f=apf:UoD`T&3Y\42fYkeDp5]H%,;&[N"%7VUnlsp[CV>NSCf9\ah1lH1rLg\a+X&(f4G_l2`DYoaO^gf%BW]NE>u^WMB0&
%IF&&#)VLZRWC]]5?%GpV\15]"Qb<QHZrO?F^3Q+!/+275^?;2`iOH;'6LLrKCpgHRLMsb0Nuu%5Pk2WUgeCk9*t6QM*J<G;bBL>L
%V+=`Uhb[VH___JR6G]1adU#+aoSkEmSX0p[qR,k_?2d.%m\e<QR[at1a<RiLGH!,S,YjQ6Er,+RK<=K8nJ,qGbW]B=bTk$;UN0eB
%Z<(Im.G&mMF!mK(W*R"sbd\*5gr@#OW,F!TlHs;H&irsiLo>9AhJR$h+1F1aE<_g_L#_imT?l6e0;%nE.*^t?$@IY-dpkVuI>k%3
%N`X;(d&oQq\p1]O4b$;C-X/6-O7T:2jB?)_dcZl'g6(MBHi<R,&JA?lrHi$*<=L\r9J9s@HrtI/gD=fk;U0HlKus\,oldul>Ks!g
%GI&roJ,5K(2a?3efsECZl0S"&8Wo8p\UM!e+RZSYJGS8g"8;(arj;?428Ah25OQcNG"o?jBfI5P]sW1Nd"Eq(gE2sGPMFi2l>?73
%H;Nm!ZE=>r1H@Lj91c6n>B7A$S6=*AIbaje:E=9%fCta$>&Pfdb&>-[bSDtj<VB:(X^H&c3C!8sHm].3#Xb'9l\Kfc-kCI^V4?)s
%>m*p2Pn89d%mJXd?_4C]ZgAH>>@3L1no-IUYGV"aUE2(bY;S:?".Q-"4H=PjOM!Yi*uDQN.6Z_*\sp-onnYeqHM/O,3eM@3mfdA7
%d.]SD=PNcuT6skSlI#mWCk1dB_p.#mb,=kPH<dXq1V8T!;TL43HLfJTm+FK#OP'!CZgILboe.jM4)?_Tog-\*CRH<Tpm<?'CAsf@
%]R':9CndgQY[;cN8,`BfM_.cUVL3eg>U,P_]ol_6Mr\0Y3aBcj^N6OeG-42ZauA5';lh88$bQ-/W576a#9PRug%3pqAI^O+%=ADD
%5OBShI(\91ej$'=HrtE88,u'g%s*Huh9XCG1ZR+F<h=6j:KQDSpIs3WkVuW_d,WMN^18iKo+-u3k@o[2;4$%:g:-2_MHKSYT1\S@
%7J<c,$J(hrDt^d3pGgp2a=uJo5MTSd5D-]7peBg8]tL&^5$u$:7AhcImcOpi.n+\?:P6*uh$;U2;cn%/4TY+Lp=@7HeTU4;A"Sos
%=sPbKD&'GuWERHjG8I1^1)<e->8s2@VsWcpZ,hC*pnXgJb$/Z?BI#MHMSt=I9`hiF7*Xg8D"#rePul'h%p[V)8GTo?+cf^^J'`7\
%<mtiNeY79F]m/;)ofb`K?s7)5G<S47/O(_4bA-cQX/tlo4./Tjr.W:!EX#jBD'RiI+H6>Inn2'ph,jQAjV&K2/G6s.EAOSsDBcKI
%'>l_\/'ng4q;g/]=\V'0F%'g#JC3+CDgX+Qcm#A-kaC5B;.:=VoVk;1iDkf9Cj=m6K<PP%gW"RR0HD35a!LR(l^^aGUipW>)*\jG
%Y-@D?f5%h39$tpElEH#Rs$T,059?'&lB#aq2c6]"O%:Ng<Bb"lCR.$Uh^s<4o8BGg-*it8rEDdm+*/&?EWcE>rA].c_V'QZXa[Xq
%Rn)P&fM$8Jj)F(Q&+7%OS<5cLH(q%2gMus9Kl'7O>,dQDENo.+SPMiOS50`FIJ<WbQAd>f%0p#$T"/&MN_&^`?F_',aq#8LpHK8`
%C_-jDT=F.S>H!h1h$XZ^okO7):"-:'\ek@+>&Nr3<'MVG>`ItaJi+=43aS3cJRkNSkmsd>afn],Y9bCSe%I"1<ZO\/MP4MmQ0LK'
%Wd=Q%+=ktk-=$d"rX-NB?W=1kB.3b^SY%:a9qR(df7Jd1G0]+V4B:ni=%tfR0(J//-m(TFJ,c3QEE6gS4<2`5Q#;L%:CP(K>:2sm
%OQ*K<Fk&@6LpY]4f:=FpAQ0"*B)o@:N3(ktXp:9@CmC2Qs4hCV>E%kXfaf/@h1L0=K7);CXVWLqU0k(C?U_XfG#WV->IWcL*7sM9
%T\hWuU/NaaG]:O-P5<NWVQS;SCE-7uV),,acb2JNjFAQ3S!ko*kAe,BC7Tu+N\PjRWcKDj#"Nm@=g%&I6apUD#`tStgosO!B:?XG
%lUKs4Fo#a'9LV9j#d7aIa8du<eM2HZQ">su=0/+LUFQT$=m4aodCjk1J'DB>XA+1l^WZV*"*DK;pjh*9XtTXrdRA<2&\4TMj".^-
%kLqZ$BCpM,CHHi:-$dM1U[$bdefKprNF\mKR-2gKKj'b[GRF`qYCcp_3u/ZIe\]jZSK#OYXT:4tfYu)54jQ^S?.KqolT<JDhi7$:
%+_QH5-b`,X:Otg0n6Se^NU54IG\+WGg=VGCa$A?0eB<Q<f8)N=WDIG<9?Yha<@W2%Ls]&IL6]Gu%!2UmY60;TW6],/Xqg9df#6+u
%f+Kc];rU$Y(t\C+MJnb`>o$&tejr5*)?Zj3T.IRnoGH2Zd&>L8omq6f+p2dh5F`.#Osh6d)/<It7Qp>]"/j"+gGTXL'r,uR2K2?>
%FQ]U6MIDc=<YD0OG9nt)7oqI)O3Xf.A?e6dqPd6_`d)Fj^ARtZc1Y:q-]MQHeKf)=&)Hu&3TDoNf55gi=nOG\<qd)n&\[-&nmsc3
%dh"R'lD]d]XXjhWIY,CD6!q[pV+6!$IiYuEbAZ>BJ!JU:`Q-?qqRY@tAH-$0AFKI)h%Tg:h&6C83X7?nFhJXU3hg,W*[B8T%,9NS
%7s/%QR'*7SY+HH\*dGA)ieX26HJpoA_`aI?D*RbC[]_E/W(/XgZ.';s=/s0:E.rD]COX.UjNgjNo&cR#NG<7BDZSkLYRM?E2")7p
%Vbq7eA#L[@G2BA;Y+nJ:.>SKlY7GJh?OnfZ)W,D5Mc6QBc*YG`c"iHVSDW3f9Gqa-A9$dG59Y,_g8k(]Y%d%?dO:Hf63^uMbT+'Z
%e-XE/WHoRFo180?JjSS^[?b..B<?=@pUiA[',aAqrM-W[nI[htA;D21Zas#cK@4+Uq7pp=qa1n"Hf+cbng@*'Z6+fKS#LH(aG3.N
%%ijQsO&R0#41=spGR$#1_?*$)\J#mCb4W&"rg_UiQeQ<ge/AYTd/B!__XO]6&ftTTVh`DEq)Kc?&U)LsbuREH8I)YDWFOFa5DcuM
%#F?!$>JZ#?Yns@1c.&a^p&]Dp1e-`B1aX1tAA']@jD/ck/C^/=#Kk=aYLQf!F$-d1X4@WENEX<Iep^TKmI::0oqC[@"rA)8!1+K5
%hGt8_79it^5\@[?]""Qs2e1c_`#e[2DjU\C/nDo$kskC(#1t1VO"]7QZ`7(VO'/:BCi1'<01t%:mgQT@7Q`W66b5HjMhXC>n)R'2
%eN1.1*;=9HC\:,_I"TIGoir]>>@XQnVYrRp]EW'5:,KVUIflU^O51AD]as!+UNlFn#jm!(-MYNS2aHO[OUtZkGqDqan25GFA'I(T
%44d2RTH_^/jJPFQqDHDs&"bn#PU^q=XZt+I%%l28G[I$X8K.LsX`:a1`n)4+i8NRbo([NdFl[W.BFn6MWtgZ9l_J18KfatQMQm25
%[<*D!b3Rq>f)$4Jh^`b"U2<E1Q1;$]N236G#DdFmi!<qQH%k,]XC$<W?&TXkhQdsl_(hNq^OArn)RVB)[Hme`)faAQTYgNlJcg2C
%Lh5k/WP*W6O/Jb;Qm)I=/f#1Fmp(YcK,r%5Kj_GLI+C)k06:GUZ<B\rP?_En=[>fYBF/8@_f1rC,i`A,Eg,d%G1/19\*<Vl9KhUY
%_eI7@^_?'3=CKb&'!ELK:T1ODI_4o.fOhqPpajt5k[WA(?t!6j:[+[-7)qg.O^F9I?=M,&/=pW+^`?&jdu4\LUojEMn`sCN"Gs2[
%MnEN/=LJgp%(qReOV<U5/&YnI$o@5iERIN4d47(K/R10q%Vpm;248c7GLUk#)]Wa/R'u$FN!PE1_$4+@10@+i$^DFV":OS?c;:H^
%,pGl=]>-kIo"l4b,M:LJMipQ(2eUb\\$HD"<cs/F,-.@X44UF9QAI^CD]?S-HH1@,T'0T%)Ps@qT(4488+k8hl+VUm3;5l:['S-s
%_pnR&aV:0`XUde>Zd:,N`rm;B;OZsZSa1>&*CWWDm]D!4VW@c5/`!ubbB5$/W9%$;h:qn2PCiaOR(mOTTp7Q+a)t[KoU*9]%qp`.
%1'5tYjS]@a94DS=f1hn)g#HbKD'Q;Vh^R;,dg<>h`hS8XRJPJ>_kjP9YjPLQ8VD*2V."-eKiDruP(gtOs'[HrVg=W\/N$ah@J;ii
%q*0qih69)G+AJ!`p)9(?_8_T4EM!enE13gC6RYc?8Z`BM`:.^VlSM>%<0^1<5Q;9$oiIp'ph@>HTfWS:ZKN)4Xh/4qrXfiX1?Z!:
%a",J[X,If\kJ/$^HgdrXrDg$Y=p^c4pJkgcN^B8MgY7.iP9kSdb]$01-sUJa1r\cUal7Gq^F;&1;Wln.J=+eMs3MB-r-7r<5POD4
%dMBFQ3XIAeKl*7Q@+gk.g'N-Q/7Hm1+W[Q:6U&0S0TJI>NVX='4f;(_WU33-Cr<s)a%om5pnpZq48e[\]]Y/Zhc2s4rj7SZr#^CR
%HjIJK+,/O%b=EG_deZ!:!ssjCT(d&o*O!(=](G:eqYDu\,\=_&nGriKl>UpmOR)5#>(`p36a'U,2qQYM^Dsbl[l1+-9!):MD*-;:
%A?m$KJ/B+Bmd0e]&c8Op'SasNl8cPMPksRYRq[A:U5><UE9]CIrHHlmGFo7e+nELX^A^96qS(WPN$%t7,l)r=V2N*rVXUQ=]%P\X
%VclDbmoA+03UGW*47^8c5#s`fEF!:=pps6R-&oj^T79C!:RXV=M,b1?8QQ68U-e-7;KGj=RFF)u:Ir`*$A`)-1,UhW/=2fAh*mN$
%l9\9WrqsZSS>79)7?*JmE86*mh5%/Ue6qT6U$3o3cr?<fiGCZUl\9^`RRs2G#H^bLFijKdUm3d4K4c3q<ohW';UY=mSon_/Q7M`5
%gEPV@8@48MAikTGVn;l.mF"$)P@/?m]&gG:#0S?q6dJ@JPEr72C4W6-Ybb)h2Hjbp(=4981FXol(a3j'![!IA5_VO^PLP8?N^coj
%CokR\P+'3]"$"S2,A9.X,^%?SO@VV"[!;FCUZZdr@+r&KG!cp"g5lil'%A5l)Qo3)[9Y:3>r%ITB5Q?:BppYXmA+;2DSe;SHk9t3
%PGYMI$(LYGU(3#[8#,;W"r@.W>Gn%"*BWMSZj4$6=>@#t2As?>Uqp;u1eeG>9A2csGgn%q-;B=tR<1:>(#*_l%b)RX&W')R*]3,u
%7Z1%=:GCg+LDFe.nM]@T2%>?;kt0Wk(sUKlRRn3,dsdH@"Uq7sX!AbjcdGkY-Kkl?(9#52#TaG]RRA3_9+)=MXb`H[1^h[g;9_Y#
%7(I!ML:Y;(ZkC69XamXs$`#*tAeR/4"jr*9@RM_T&KP_]bV5ujTI4tDg(mkaTI-5^_Z;fT#qSU;]TVc^CQ_nYUi!uEXm*3@/f%"A
%eqAl;9-R>A1X0;VBJH0_R6p;%9nlA/'$>;8V!SG>65$/k7Dq_JN$dNbTm2W&FUK-@>f&G-9$jS0[(>N62%V(-#u!T+W/1ePL/IQj
%6D_u0KN!lEVoae361O1&BOoQlNNR/>P9@YXSepI$>LHBL+Yl!DVT?.XTKQ+*^]ag5K:<.k3Y=TJALZRt!KftZce:t>d6SYQ9[XEu
%;?kes#4jum_a_oMq$.9F(Vo:BKg^"m\-UO(!F&ANm571oJD@DPCn,B1/3;9IKS<E'$W.Cj'$Ld+@hTHXl6I-N;`><n^9tam3_:7k
%Pf'?I$+n\RgFG*m+p',@M+(FFWK[3SH^qH:9qo`PFs?a\]+>rIT.V8e9dWF_;edY_Kud#a<TuoiRKLLl$mQ@O::ig5ARHO;_L$r:
%@LK8u`[:LVr</Jn5e-Hb/MJ(p<7<P'CQ^[)V0^W^8g5P29%-[&'1bt0)DM@J_prT]Q@h."*[GKoq&qMM#QtIN"<#H0:'Cd$c6Ci8
%-BSub8&HHu#c=CUdkP\rK"_O0*V,Pn\Ol`CP&q>bVQc^!8>mC,"-N=DAEI>*e"BJ^FD/e7?CIiS3fZR%oUVjF_I3LT<OJqS4/@cd
%1I1i5jq7k!:ZBMt$^QHSC''Oh$q0N<VR%U'BVXd8BG'6%KD(9c&q<Ko1IEDPE,7X0ltqh8TdGp`!JX1COA;&JT@AjtKetNP9LoR'
%$Wr6/7'(Vu@hKUMUs?>5]5DE&UEFQI&0lFtBGeddXYk2umCK9t-?<+B`^p1\cI<lg!`t5*"*23*h11M*P2q@j5toCb5YDZaGCWo>
%$5tuZ+mSPJ`3EgQIaTLt$D\7(d#Slo9klaEAB>0$Cl-Hc%8WBEH+\Y2FJ@I@*.#ts`-tgLNDLBJOmN4TDNMrK1oNlk.9oMIl]EG'
%S`!YFF[h#D$BQ:ZWgc6U8Xj++BK`d:DJ40[N=Cj_%Pu-ZBWHc"kug:b(JPB(.Kg%\a&%h[L36K\0G[4dJkVPJ7KFS8[WN-`KnW%#
%j,,dd35X4A:l'390Ipf_4uXK`d0jYD5oaBh,Xg/IOCCfF3j6p@Um.aRf*)e8;Df(+=:%8+=HF4n6Ad\L8-fkePSj`UnpPfL"gOH?
%l:&0jV9h+,(h0R(FI'+@63pIc[aYEU-Mh/(U"-DQ73`!B9os0JD'htYa$+I#)[INhLesh#O@lUO>=uPjm\U_'&BuD\K*LD6J?j/O
%>7nFSHPXq26mrNuO.LL9CeP,g3?h[FK%/Cd_%&"Sk%,1WQ4kg:<&6Ld>!Z48'ElmF#`40F6qmeK9Ho,#CKc69%;W5r:PZ2B_HmL=
%8Q\n63_=//#gn=+U`Lsp[9sVRUc=;un<kQP"mphS"#>K_6.R\H3Q,6i$tLam1kd>EULEYu,`3TbMTcO^0SZ%7Z=s@##/KL=C'Hsp
%:fJS\*Sb$8VC2J'(8Au[PbC[dRUmVgL$L5e6f8loC*b)<&q__\U&ejELjS\-W6%rGlRM\Y2&oQ>99R7.6Lcns"j+'BnAZCmJJ_8i
%K3StMNriX=?oFlVYi3A/NsJ9i)Gg_O)am'n6(daJA@iNJR^<^h1_:*Mq_6F5="sg)6W1n"4YU:)lUo7Fr3Q]>:_LE=8H:L_ec&FH
%A(Z>ddKRkrIEn]N<bH+DkeMd[aor1F,T/NR_ibud:ed=@_I/r^-3PieJ4sTq:3`u`g(T[s:3+c`4DcK\5fO538=&d(Qs3@Jk=A(V
%Agl-ME_,I7Xoh[6/+f<kd`,sc#RW>*f`F&Ir"E2V*OEZ5[*SdsrF]RNbR-OT6XrMLGF2o/3s&TTH/GLT0o:./V4K!E,%a[#g*'&:
%fK-)@KB>+c:^mk+"#:f(U,*$@Tt!^XOL%C`NW!:K1_/;6"'1Fi)o,k;jY@BF)PQOAD;JA=?/fcq2+ftsIL@_Jg6NVDpc2cGZF=qp
%JR-`W9H0(FU%lNYDaCZJdO8RMOLGFSkqtTM8>`+XPXpfK4\;TFh3!7`+\>:#3p])).$8o<?re;V@XnJo1C6<62_@JujLl*n(f54'
%[A-*Gi^'l21c6_U;j&6ET[L7RqaJ)M-A=hHC&q%jBBb/7&dpZk$BsjE]BI%ZZrg@mO,*\@+Ac@_c:%]Nfc22DL!+5PJI=k8SY[R0
%!6@\X'!_s]EF9KeRKK.+<f7\596gggLR=(&0A9./>/@e%Rg+-#-B<h62eFQD9Di[Alt@MtTts5t3gOlYMKG4\K_$bIX`gX;"4"72
%#;\:oit:rdL(X2R*R;QkKkBS_S;1-<#fV$LM(8d3.<QH@.#e7t(p&B8HtT\i&7*#FDFEi[EW?[I+>%5g#OX)%K%Va^rXd=fn=Q*u
%"H3Hk^7M$sfRc*`l6N4j_RX*5hlrB-ET,]r^`jTab=oEqL'[F294eMgfl.1BfacIDQ:-MsBRSrX9#3#$^*E1kT:#u-23eAtAZM'1
%'_#1+K+gcc]O>MVm,]o4)JQ1(KZg'Z5iR-W(dZ-#*,KV&+RAZP6Vae%._h)+3B]Do&J;-uAa6_)7i2C$6C,>s.=6mU2F/@"R4(f3
%N_Q)'+ef:EG4mAi.+4b\qk>=b(1M_<l2o.u//O43BXY'K5LK^9&G1UV<[((egHYh,Hr5,,H=3qnLUBZfP$A:bOpD$h5ni!T8dG`:
%:^aYU4O'0O/1+hB68f3LC2u154_qkH@LF#GQ&#s6L*UA-,\Y*n(kS`SlHgjZ20nX7g(7[@+tY%6%7q5\P1\7mH'3P@6nun,Ss4m.
%c"(u*R8QAG3OX_t,q0'CEl76T9!k%MFW)H:U]eb<6OZn:%:%$&9&&Rk8r75Hc.4Fe-%R4R9stuZ_@ko75LMC]O=O=i&cj*'[K<UB
%9U"UjX,SII5_gU,6CuWPoNn[gX/iLVA3_6`!l,kam/_"e->>h(dBK@3/YsbY"4h$VRk.*#FR3.XZ>!R[$8S=b&a<6J<@Pfg.GZ,4
%fhmK[0,eZN8$sLD2;W3^,0`@l9094X<^[fL?mRcb(fc;K.54XUJNZ78`-S[9<hNZRl3L/q+rD;KVJ4/&<"V>)KISVbnCY)cE(#q9
%$^Q>?LU\HU:n`,h`cY7F&f.PiW+HjWPQV0l6'h'h:$Dr'PO#LT,N)WP#6\fh2o\mF97@[dF<&SLPjMtCFjKOqllE<F%RO"uXHKc*
%72,flKH%L"X>Of%dTD27&-gM*E*hA^B,tqE6@P^VKY`B`jGZ_[Yh;ki6-r1-@7m"s-gm.tUT4JV@+Q)YPG'_rD$3YY?A;P2ig:>4
%!AR1>[fY"ZO[am;Vq6#UUlfh-6qdj(WbiIl@FG63BG\[sFF.g/2!Q&dL@(WY]5&W*`dt4Om4]r%@[IWNh8/+e@bDA;+-(L-#)'W.
%[*mrUEn&3[elBfG6BE7kQ\L;X2%eum3EQ2#![4'P5Vb]^T2)VQO33T$3+6?WP@fIgO3f\AE)R@R5XZ7IaXY>GBa:R]aPQ&u\H]=7
%ZVP):OscY!GMN[U)P$uT#f%+2aHr&$EOLHbg2NdcKcD@DL%5Q+6Fg!iX*)H^Y`[[39;[hg9u0UuG4@+W!6mFP"=+K-ZfF-X.\':F
%n%cSd(N$EHk6O;"AjNB$SM7itgO\fgb/fiC,eu(kp0nCh^i/^7T_C8Xo-Zn,;c.>%!tGEWF9TMo-H)'H+b*#aU37erUl+qgfU`n<
%=?/SPXmMK\1I6*b;K>;]S(KjqdPR!($h/es*b[E.?,=p4J_U^mk?['A^*?I+61a@mgIZDt\c]NO5loMo<b=s4duHc;nZr@S9F-F6
%=e%*P^IaP%F:#=IUEOqt.q3T[*=1G7dRMalUlrapK1N*g$a^fXI&^Hsm"+)#*fZ@BK!7Ck#@_W^nM8lE\!M/0<Y(K0i>d#A-00B-
%G7<IDhTHtsJOAW^]JL#R$_(Y>8D#@V"k'0eS2uQ,Ok!?Y3HD%GZn.J0,9P-%+EP[sf2Y@A8!)dt5Zj5?"<nhJ<*)7=UAc($BeYbT
%Fb;BQKb-!mfp3s/a2Dek'n?[7cI2t("3!;2EAU1o?%j%5\N@_[iRBh^+1+G@*0^h]7@Y@.#0$uP90/Z(%<d.7YX*N*jIp@&6,jHs
%(3Zr/<J$;(UIeErE:Q^_]lF1VKZ,)$B7`nk:igHlrt5o4Mjnf(:D#V'Z"0D(A"fDXd_f\CUa%6pPUSC@.OR2hak>F/S,h*%B;7uX
%";*cd!CIe<'PMUj&V+CL9h0FQZ8N]As.n`G/7Nr7=@?!T,VJ+'&/708gG6Bm!p4+13>"QNg]`-^'GSXIQrm<h:r%C"&UEaU'R3Xp
%.SU/16*^Y"0JjZ0':;fjn>SoQkd4#FO8p%_!D#]E8/MOk6o"aAPhk9--RPKtX7Q^fn!F4.%3k$jEsRbqJqh]$?Q1F#S^[/"W$X*m
%L_4]A5t5'>A2V6N,?YfCr5c#s\4K<<[N`tl.Jjn,,4@d<O=^o27gh$r-R;DsFB"GE/?XmZZoXYY^bEQVi!M7+%$gHA&;3Icq-I)T
%U0o;%S/stsJDZ#`!L'9fGa;S8i^W\P6!CZ@:m"]+RER\n'f(Y7TGnKA-;5EiF@QKa>&!Mm,&cIhl=[qb%iAW.OZZ#g`Xo*0#/]&(
%XP#:83/q=nb"/(D.qrB:Y/up)/TOr:(eT`iA84_p[Bg7AhiQ!YLDMS=g+S$<W<jpc)mY?A!Y#>aI!SkmPdg"D%$3cV/7dm($R3qA
%pnU4h$sH'j\1GVY9R?n6BXNM/Fg[55@nta/m'(U*:B;<]<s2)1S/0j7,5T3/_rI2/7"8=G^XVWD8lU_M!_4ru/K"<i7;4.a;!&Uh
%1pfFL3ZME0U='Jf!3LocY,!2p8&[M_3&#/q)9O?r'3@Fq'9+28>TU#%c*dj6NRZIadVsl&G:'Q7_f=L+<$(Xe(3_#pBO*5\&'[@n
%ZK#hCo[%3EMo]D6F_OX**g+J_g10R8aCA-m;^hP(0d;7)mRH:mkmXB97782dS/N/knsEW%/PoB!E"KZ'7%$+,fMpP_5'^rggBN70
%*@:Ic=_^AD2Wo%`Aq[1kT_:_UR4W<a=J<&B5]@E3m*MHJKuu^q=\D&SL[><8+rAL`8@g"IJ=sIUDi07!KsV3(g[%N])20DtK>SM4
%SNo`.Of<rh,[5o$%V5NP_oUPNoT%_X<TN"+XMTq',/UAeMp9.I3YQPO'Ma^N!a6"m.RKRCM">")?,;C`Es(/(dY^t#JAN(^hML__
%5pK8j*+t$"@u8#>"Jdu@Ko:nl;"C"'5nN.OD2%W&UP&u4X\Ze4.T)snR(o?h$=o0LgMUEn@SJDbf_pIc[ZP[9OI<@r>@Gh(S03?<
%4H.dT@I7OC&;F(7KF$6taE(0?`Xo-_iB!["Uhcf!'eU.3.Do^W!KRC^L:daj$ME(h&o$XHcpkm/GZR43kq'2$RY@I_!Kj(g+QVQ6
%4,e?G-js.tJ-R50iinuhk93o'E0IZ=1lIGkk+rE/$KP]!q=9?AT;tX,MlVqkBl.E]G(g?.9dc1GD"Q[h?!(tm4DYERPlKSbA]QVq
%f[c'R);H0E.A7YP)&8FtC9<;Vi@qkg,=9D%ic(0M%>9ZD`1-_^TuBeUEt0NLXV;BD5eIc-9SB+5/V7`KLl`dK_ZkkDa<fJP\Ol@t
%"0%pqnQ<*7=UO#D!6Z.Gfp]#Hc8qYgk%2`*r>3nCZmCOOdc)8Zq!SDRCDdj][LL2S!]CNO$OOoYHI1LQ@fYacX&m;[UZBQP%PuH6
%:lbY?(`GV/>Kh)jW.;,m7$_@_m#\&7QrDE9^)1iQilrs(LuFKTB;3`bX:3;+&0=1YT-Nf@ae<NKlA4;d;O*"TL,(RtH.R03QlP/f
%;%Z;TBlG[,&O<M@5YOpSQ;Z<k5beTu6:6PMAUUMb&L*t<L2cNSdQkH@%OSG;SLZ?RjG`^K3"h53\]KMa+qt>__5+@sif'U*Lc,Ml
%?.XZs_io]iB-Dq1NeEmY;UnbTA\R[.&J)<TS!tC^IOJGu/+E^YV.F>iLVCSpPX\66dH86FV'\`&8$P*0!ZAnAC=UG/k7G,JM*]EP
%+h,TeJ>LC_2C]\k5%nSR,aO:_*iDdVd%H7n1MjlYO^-H@0?lhZKjY2\2-;@1W$kL#H5n.%@(@WO))C@jas>q@A5q6W`=>/2'k#b*
%DID#S1/9#te8n6j#qaXC>!\u3;D"CY!N0&((F7cfG5%@-8C:6I;IUbKe2$?9:me8&h$AW:T*><b'E0u0+!^rf'uZPHfWfr@jf;:Y
%%1!.Y4u]mDp(0Zp+;tUp(\ork-A7@f%0uD)CpL:0W>K?'H:JPofAS2YBi:XDO9QqT-W%4O6frr!"S`oMb(5&D#uN"/Yp1s@3ff8.
%</r2V0=`j_!Z*nX#\1GVoa=2C(4pD3J9rZR,Dnkh+u8F'ZGa*_KcV5_74oJO2=cm:#J_RG!i$?!94C+9!>S-,NgC/7C^9(GNr#2+
%3]?F-%"(Gt0V"-fM]q#u9HJ=4]*92r,![Mh$[Q'qE"Hi!ePJ+2)C.t:3S6`_(Y.pT>1<nHg'BPEEpm2Ie,o=HBYbBDis.!=iHuc`
%a4lD(Thm#\X_pZ[%T40T%hT+%fb-5Yn=Z1$9g)lo'`INrYY+RrVh@f%7A>U6SK9I?P!Kj5gakVHG%,0^:9fj4`%DfT,\N2^igKQ!
%S=qFh6Bqu"<M2]n-Db,REf\EK8B9r*c.Qa`G*BHW,25s[^aN9cll&0A&GeZs$uVd.*?SP(ZBT05gPsM_8<u#9].3t8"-Lm5fdL2T
%[NT4CkQlga\Osu`Qc:I0i)?t@5d6p,b$fjYH75.\0\7#O.""G\C^=T?1V=Jqj*9sIa%Jc[eMn28Z'Yd(+piljX83gu+;-E1pK]r7
%HAPN2f!m@)6I8=)X3A#S=;'Bj0`eLq`\t-jL`*NJ-'LsU+I@jE=3H<%Q7T3NEAT@"MOYMF3;R%;JL*b=_1e/qJdlF,SFk`<'*(lR
%"#C)2Qu%Ka+Hq^rTa4(`2dmiZ-3M1!s.H0VS.(tA*A.m[-:4OI%b4F?eaYm5';A1+Ap#9#;"4kPM2)a@pehj')M).DI27Ja;/R^_
%*XStc[(')c;Nr<V=]:G7Tluu_<uGCZ[+O3?39dTH,$2Up\Phsr$cf?Odda9?=/NMX+>a-6W7WUqA$@jZklUF-aBZ:($mga02PUc>
%dq2%-CnZ]Q*=Qsi;$de+W$SX*lnV9<KVNouP\=jjGU@eOSq@MZ@%;mj"=;S:'+(`@bmis>-#>V0[;%+?dqShbPpq=cdpjCrWWjYi
%<=29Dj%-%_A6b6@+ibH'ajS!k%?j.RX@d>@+c,%b$CN#e``4c]j1m0B\B.`P&-Xa+8O;D/OAtcPYuWu$J9)TN&0_b7A(:!&NPNfd
%&-,1!7;$)HR3j_g]=1W\bgK<Sh#L"tF]_]h"HT=N>ZVHD6splD.qTX*ee,Ni<Ytld\TJLT7/.;*A0R1fXVRF&Z7KPKK?\BJpgU9+
%d5B@<SA',JlldWB'.(.R<A;iE<31WL'gkP=D?UFkY12UH"oC49:9O+rE]&FJi.M/pAI<dsT3s`\M?b78DaT[h-UX0_gBe9J2kWQR
%-!MXV_%mk!R/r9t/[.AN=pU&8\;CMq@Hbje0XS(8's/,B&)$QM/k*9;]G(If)f&]K_(er_d=?_jeSUC12C,iL8Nf3ZGHu9aNiu"!
%;*l[E:/KaPiF7I&AT=)sdglj?\.VdR6R5X$O=E(;a!?87fFre>@Ag@Tf-!Eh54[-aCP[k2q;q7k2,nQ&4pto;BnDaho'n;48R,\X
%`PMf<GQqt@f2Zqt-Du&j0q2Pb662NQ.PW<>#jHAgLGM^u1F^5sA=^slVkL/A/".`qGmJb3/rrI3J]Sm^r'XpMTN0W^+;@Bi"Oejl
%%S7k)MBX8cJ;[#gKjSl+Oj((1Wsr$JKqd:&,o%FQ>.#XA^PGiWJBd)Br'2`('fU3G6BR1,:"'H7.?Q5];l=:D((Zb_U#+6VQm-K)
%"P&orGY>MA.Y;[dT+(!U7A_`7:d_4<Fm*(A(mU!`jFU@&;]lkc*2@Nh)[CBqB15LNS4+P:4"!QY0u@N*Vb`E1[Fj&bX?n5<JbXtP
%W)H):ilI<.,#T!q(`\@sLd_s_eAL64Z"W.@KuNA3]*4Z:4$bP>b+9^]>Y\e]\<DTFN`R9t1"^)Gq+6ViO5[%4E\(aS8^<HtN\CT&
%7S$ObLK9]4@o&-F^GN=8#t+K7[R>Y.F*W)i/!;">G2gep!WlK/Brd'\J8F'N^am5(*:cs9X=IfmG'#R\HmiMjkE]OEKa]q9&P>I2
%^u06U`>LXdCRT']]*>m)>f%I;ogt&Y1563R@O>,',R$Iu-m2rjO-.Q\#tHGsG%Qp<7ICFrULN%;RK!R;dgF:I;6HV:I"C<U,fEhT
%1-uO0_JD95JLqV^+=&*(!sO4d5*"TEQsF>PQ!I[+MfA5WLW%Qq^hr(`";t4N@S55HkQiJjH3?V2`#@uEc/ooW_N@Oa3)bE-ULr#D
%6J]@D>e0/o$']AoHCm!i>*TX)S1-'K!HE56?'lUdm.I2o&47+#a-X[5'GO#>G$sl#Y_E:<flYaP#8pLh7c8%skqNeB-7fN-Vth#I
%+qKK0#j=[r0pJb=7lA]XnhEqe5=1oGhkEM4?ik<oMrN!;,DFPWY(9Z'Pbi,?$l)SNWq6q9?ut]UX)JXlhk2i!VC1HV%:*fpM0M[]
%-S@*Tj0XhS6]"Je)-VnW.a$g_EIO4S7l2h65XD>#\<s7fLgs7F)<=*!$Z)paY,)Uu,Dlb0J@pVr]s&Y`\2j`6;GFWP$9PD50Y)3O
%#d#3N_R9tIq'?[:I/K@+$^7Z=(T5ao_DO@HCVl<k.u@n9Mnk"&A1h_oT!2Kg\[]?p=N/i8%rQ01m`]Z4-pfFU>!DbBPP6ml6D+tE
%%VgS;k29AV6e]AUGo:9G*2M`^g/T+uE03QO1-UVWb..dNO;Wdohh"d1=:1[Tb,@?oRh#T>8G]lEOIXWC@1k>$2,G]6RN5h92*6g5
%PRm?4+%NHd6mBui':04I3(QR(C,k@$?F+DrV#rhQ53N\=P2KCM`)%9d,%hgp&4RDI=X=P(WY&?l!B(m0F:m65\N#f_2i%LVkp:;/
%$*uS3?m*D.d$cr&"<'Q7PE/0'<a(*E9F)^B9qVnpBSh\-@LKR6&K-F_%MORARKR^[9a#$>X5Vhf>RcRt_6Bk5ip1&!P-(t(Le(+D
%#p#]C\=I"K'5iAtFpP4GZLKJKj6ZXd/S+H%(__j@E`g21O9`:#'l1rGI\A4K?k=6,%>DBd5#^R7eU_st:Ldc6dg9dD&I!+j>cq&C
%l$"8A9cGWd_]_W?X1>O%'fE"PG_77k/[/\$T8;44S<(SQ^g@(Gih.gbN_R6O5nD8cUKRaD)m'<$!1HSc4UZO-JfRQ8G)@V)RlMCF
%Opbl-*09,n,PW!3L5?7Y_uL@@V/=9,E(X>Y!_Scp6$K]AgLPAWc=,3/e82,ZX9t5&3"Zq%+qp`VGegJU&k6/Mi%j^/eD2%"+d+=8
%pOECKX/#g@7$l6$_4$W+JQmubAWX1[,AI^TPET"!lP2C/"b%(N#"NT.:$)S!`jLD'[hJ6EoXIBQO+m?bEcWp6*@JoqEu?u24cQ_"
%`%_N4*ib&AN]>8.L7O!Wa\jh6fUJgfi-g<!M&6q''3(*h/jWu79]/cR/^CWO@E5$i^f=9_*(dI0OMoV-!&#r+b#ksk8Pu#Ck@5RG
%A5+(+kDfUd==1o'*%PO(MXinD3>H`60nY]V3Z1d3T#2<.>R8&d9I:gVX9!NaTnshJ)&8B*.h1\l3MRh4^fuM&m&QK_=[28;_+4D*
%0r(=.&krQS`C)ZsgLlqUW$#YJ<.]h6S6onXA#apF_<q<aZ&)GMM4uANi=rmK:2ZdU&U<Ia-Ks"._t$5@30FBtf"ac?Jf'l&SK0EZ
%cie8G]9:<a_X/g"LNCi-_FFiCg&5G1U\lKSEjS*S85nt:>,J!j'aQkab$/?T*^jK\N=XMGLW(,&\58S4GTY@C$-L68">8V5M'/aB
%%SK0LkY0)hDj`nVJW:Cg[Ludk>YUFB]5#=O2A&eGYSj:SPO/QB6*6=K;;fR5Z":G5[Lrt@?Pn0p*Gj$+![G,pn/eTR3G/_\QnL`*
%e.*:R0qof!6/03Yn?g^=QsA"`M_XuB*1*^^9Kr2aC4&'@kAt$A=p8ZpKL3n]F'q<TI0XoT;BLh?I20Sn.[Z\06qnX%jTa>?FLdEm
%0A3k:_hrCR6<!1-H&(]nqWZ3u;6GPlThYoL>fYM=S4W_[e\,aVCg!4apO6Ma6bXGb(f%Eh?MBfOK*6qG1<(.;##&6=[1#5TU1^_#
%[s.b!ca+kVA4H:7Wp2n`6VgdeMTFG:Fa5V>bNl/QSdu-[a&Qc:Y>3=?F9b/KdG/lSF.]kBmoLOU,J"oi<@>Rtf#Le2L"m0m2ldGP
%80Q<-?$4NF%b(Se='_THDY*dGeM17L<LlkDh#U]MAqeI+7T[/)$0cT_`AJ;:`c7?Gc9?23?WUO@!E>*LB%9aaR,.!5&Iq5O1N"@C
%4?HC@?(.qgQ&"1_d:1X][s%X4*s>)<@PUrHM'pd3'9d./M^,Lh@5>Z[)EUE0182X.]AWZBR;@)c@J;gLA@^7hh.56Rl,U?Q(ChP,
%j'4@tF;HE!%DdB9S\JLG.54-4[f#/rU1h/S-3oI=Sc2;enT82o*4HahKIgqbIpgU2Y6N5hJI%\uA/udUAcrb]KfC$m"c]HDO`sdg
%lr=F?k3Ys%4-Ym=]B+cs9MMNB<ZVFINC[;&=1;n"#nR:<3Jm6i")>Z7A@"A2h8,qHN,*JPnN_r[XFDAdE&`Kh15o\;YFF0srnOL=
%`&(_bd+ulihm,.ORm77^a"8ZOFqp\q`\+7R0dPr&V@/:a73m,D55)mCghD.b[W?j]K,IDF(N'[]&i4H[M?DWt$$,J^j!U_nGCi25
%5N(l!#R!\8Skh.3$Y1$a5,Ff1QO?eS0^U)A+./NT@G+&X$K=>3VM:gmOJ0Ml1T&WN!F69L)@b6FXqo>8?0Dgr+t]B,>K&Idm=dqV
%=6Lt8R"Ha3MSP2])#0.j>1(P7o\?#+ma._Kk]S9"$QsFsSsW1Fi-s$0F1OWaL<k`LM0&dEm!;-aLR*S)%#$iP![jDtLb&^X0e\3h
%G%ETj9(P@92Y6:k9p3:a<Y'QB/ODreL=C3MnP5LoLd6cqjpk!&"-E96AiP1'(oU;6>FB2j'$)1e`]\>eQ:Zu!*%`4;7L3bSTMY-s
%K'H,-#=)+RU5ZYkdgBg.bQU!E^&fU)h@nFLc[I_\]+t&eGRf`?HcUUcQRJlnJc0Y"Kq0+gOM:ta&A/Or7rUu,=A)!Y"_7klaX4Og
%;l+$2Ej/XAf!m=FGkCfTQTYYN\1GP5gWF68r^La+KY-3%^+MWa2o-NKQJ[o!o?^F6P?!aLME$[*"XQrt5[&htTO)Q#L.u3M2$1h8
%O`sGI3La(Yp"[R45hPn_"1EGrg6TPQB!a;Q'iY3\]RlI2o:lJ?g=L^KTU,i@>bHMQ>I<8D>js*[j"AL\L`SGe8ud<JrihN`c]c>2
%gdm;[\3@X]8.#?O[JK2Y;M^8Xrn]Ss66Ij_ic-1l&RLNRZj(*6>pE^UTi_EZAfUdHI0>G^P'rYna9mgZ3W$4F:nb&dG_gbn&(G&7
%NgE;1NhU?pnRIi<RL+Z1D,ceJ\o=_)2]9!77J*q=$><VGP0:BY(V-LRNnc80au]d`geI+e>0,X4Y@.PtNfZuI`H1e7KkMWQ4Y+S9
%aQ25fBMn?F_mE-KNG_PVp('l2#C!Cfr[^$F2$+Yt`2a:e&Z\dE$eZg>T,sJsq:O:qZC/LH9G&fj(W`clRTB7`\*n2^@Z-qGr$J:[
%2>h#8m#J0n<Q-:l*^mqGBEKUMK#jN-UK(W#'.45J$DjP1p_tLAdhY3,NO:/J)0/%Kh"#V//kC.$gRF>lP&#f(c5BV^j:]e'Cmsd=
%).];R(<TV-jU2$u[fRVZgiK:HpW<^7C:J?PHRG(a>N>I+%tUG1kP*^PLXiU/Hf+Nl3gAZIdfT]WUTX-ukqP/nMqp<TBjghZ,\`F(
%5?[<EC,$B]nQs3anP^2K+ds;N!,*0pS3_4h7PlCibpc(*lDEcGX=,If_OJN:Ja<V5$_'D(]aaZ+)Vn3#G.^]!<(FgK)%?a,lC7#1
%n8lMK^fYii_80!6Z6hAZ/rnaM7QW\0**fQI/!t.sDD.:Z'Y/$A>J)P,Tme\EKW2oiD?5Q8%U.ON7^J,NJImstIN6k#BFV2[RYN0H
%d1ZroCNXXS'60>>!MC+c/iB#:?#Y=]W#QGfDTF8;e2$PDkB6VAOE%u_3XY$b.EOqKLnW\O$n4cEV+)Fk=l/D"N?(*'lDXJsYAc-p
%$lm^ak<V$T^fS1[);&OW*o84NX?gP`$E)lVisH<(gK%-(-3EcOSKoj5=?p\0`Ck@(h'2RQ%.sgBI&CKrO2Te-.`SB!:(-i))^N<;
%9(>Ep+$pp^cOC_8]L7u?m=[Q",UJQrX"t"aDmuO#.+uER98E08i-&1\SCEO8rYH[P2=rbkC94c&PR`tJ5/"HUQTLRAVZin_@lkDP
%)9l<5-J6mU?OeBfqYe#'GmVEd*Rj'FDYLXo5hrc]b3tj2>j]\uYfPt[N1c!n);RWV>UT.C6Jag*DSn[YMC=E>p$7u._,KB/b=[)#
%@s<tCJiEj!oVjD0ME=Pj'6U3Vid'mQU2>((>h<re_87W,R.#sqr,!NQ8Q8<_W6?g!3Jqcilm'<E&RMEUh1<^Zf;;,c3$$DUc8+/=
%lE0lu:&^+h:D`lHd%jISV+^u(L>'@>QBd8L6s*EgJa'd3D<790W$ii>;.Cab8>CR?EeFu9Z\BA*fSDMWVgPa:TbL6:Z4.\1LC/BR
%XO),k#l#<<:_h56=8/R>N?[aV,gTg/b3!32E49,:!9/fS<=GF)1@Q/Z+;f^dc%qSWJu2\C(pOu,7lEa,G/(fm3.V)2<nhAAhSLB:
%O9@'8>iM\KYP97/L.]&mSf"9io[_ulgJe)<F(UsD&HJ8&`A$.=X+[49He5,D8igs]==`h5=BCL:^Ya+Ib9_AE7$el\LPU#)<_?.R
%2jJGTSY8n[%]sL@`KQN@Es+qG'PFIn:Sqa.[nGSicoNZA9eZ[$4:TOW0)hMBHlKBAIc%;P>RRK4[TO+:-$GDRI41QYI[NF_3Qg'%
%jUe.aZS3$8f[/8l_6JSuPtX-p=4%UY>h)B&"*;a4F3P<ikh@L"&&>-"\s0_%.Z51e\4Z#mPg4*-o.2fD)/;7I?MT\!aW4[1-Wg5f
%7-@Ro</-tPS[K]"j]b8@Sj8FPTZM;FO5LP)D!JUg2Ug:;jiYQhH>o*D\)\:%p`)/9r_:@cgc8d7O6aGrj=2&(EYl"8RSs;4<><lP
%Z[nf9Q[$YKF,s!hd?Ahq-QP'X`6!g<GBIucF]$O<*I-2KG0W_a'd\ErqrVU!<+5'=+_[q3!f\DaDe8iH`fXt9KC.P;p<?.^HuHK>
%E;QaLEif5`IIfuAQI@nYL^e>uAQot_E:0O%pl`"LEFoL.NW=hKlK9%gEPM[L+]u5;7.\%,,uJU")Rpg]\7"TqOFN4Els#\A*K%D4
%O*"Rngqs]$lMfF.Am.'i+/:1q`9f/VY*d?Mg@/SUiA=!;LB<a-U^9-N]XCn5JWcpdKLC-N#^h2B\c(oSPf<l60(*)W=e-O=j:=a%
%#kWhCbi+=g?#X&A0'_K&7eA9&A&ieXPfEF.)u1e[;*mlo?:4N:3/D+]&"?R0Vs;j9SDnVd-n$4Y/jU.)l2`Tp[_%Cn`9OA`asut'
%(/W)h$u_Q<8(:q7cUZiH#CM=1[l=I.n,c$j.'oF(;-U'+Jjm:g+X9J@>SiA.>)CMbUk#PT//luT-8bg9[ns]>CD3Q8HO@==H)!bL
%r2m:Fq'aRTf?49Qf4]^<mZ<YFLH'LL]UX4hgmaphU'r5>q,i_=L<09s/eJ+eX)gbKc&r@Y6:kpH<iTP)SN18dF1@<,L]#TEK4KTf
%"RL;6_ViCn$NR&Ukk9G+3#g99Z#\u<K2#fcf]jj'fd"ZRd.l\6&`HED-/N-q'$l95l:ZJFYFjUgTqR`K1?Mk]8%o-\C)@./3f1YW
%Pur4NM'<o$$Ri[@KP,Mq/HS4K`hK1Zb6Bg]-tunJ.`Crh@TL\pm(Bm8X>>2+//:6.2?MMq#QVk,10pkXVC1</lfEq.ru)`?,F8`o
%TA,9p-0:;.QSP<J1MJHP(CFAXMg0m%.m:DeBl+Qegn=JX%^@]MN*To9T?8=KnMiQe0)%1Qauk`q[@\#ko6OTIX.Rd&)m85<QC5H"
%pZ#`(FI7!,MjX=umGq;Gl]:@bnjjd2It'r+MDu['#j0\U<J<CW?Jp<nN64:-nuLj3lg]cRN`^fT?]PJET[W2mlOa`.6:@gFKTJ31
%[+Ka@#b'-f!tuD3:(EGQ@B-(p-SX8^EFDDC0o'uV%[#L*1bt_:)eouSYXP9[l?9+^%]@<3OdO0g<8)U[RU#\9%DG;"q2Pqd1m;uW
%%="6gn&&BdE-AtA,T`m>3JAJN*c_X]@Z@t_<(=*'>.TaH)&^\.a>r:QOBB&JZ;U7(M12<\92AF,5/'HdVnWd.,kpJ#8N8c*A;B]c
%N,e&JWZ1stBkdQJh&Pjh(>O"9E?sVH2']jGM/1O#BV>6sh$qDjdhY^>;OufUb(:uXf>htbU(hF?fMEH2'uWRC3O<IC*a'YZYo'7k
%!J!E7Qpqp'4W6a[LF<b$R^"0oqn1NqAo%[T'nTX@nH)s?LP>p%"uYCNJABFF9^!_;3&I6BMIH?Mh#=:2:V7=bR9aGo7P0[oQ9tr`
%3JG&J:k)r(6tKEIA4Gb0&7ncm;9J2Js3=8?8e5&\+n-A3\[E>ifh2K?:ucWH#P]e3T6)?S6PffaS7[OcIS@rpVL\,qo0,+R77KME
%a+b)h]/fV,$7L!2$iR@uW(ic\_gnt7]PnoM3Z7Dd!RmkmShK!XHbQl%i;$8W5&'kVg=&:,oVMKpdhf'$MTZ&&KQ<n=Y_A.m-:lf:
%ot=s^1#-s=peet96`65\KKNnU9/1W&da9?`D$OmN]P#pXhD=l+'F>1H:5Sm`[kcX=K08[O+[;*JTKY0i:jSP[5*V%/n<bUi.k$->
%9<%*"jln?Z?eAoO%_94pq'tHdBEj0@UF;)tT__i'oS6]:$FGa=/Q8hcnq<jHf1u"\nA)T!qi%s^cM'<[fFTh*Ye'$nM5LhM=#*&>
%k4XmKr0E*Kl)qFamM0-Z6'rT6g)61jOp0glD8kV$ddNUa",'+O5+GZl)BS&7B=r>O*dImt?Yc?iC+[^^T/^8g\GRi6LaGDmi*m!9
%LdnP[[<J&9cLV+nE(c229DXY;]8c:)1O`jCjU$LtKRW`6hOj$K6g&Ape+Wj*A6!W(FtBTnSYc),.\<Hu7]EF]fdPnipimP85hX&6
%f4mg`lN.TPP=kG96Rt3T>$7&d[P9'`0aEsFdGQ3V7n(1nnpu"Cc:76TrpE+;&;7W:>cn(jh31M2fp.^fs+DG^aCRf2KP;On_uLRG
%&_@XVCPmN^[+SQC"0H:pb:ZY8U0bB#W8Sq27T)qAU#qB2n&DQ>M`G/DH?M#;c;dWCIF]ML*B']hnHdX$F<7D=L/sIdc@[)$l!U2\
%$E<,NYK9#JiW,h]F`&O)$S@"*m+@2R)(&S3r>jVpMH@/?Iga/]j)ecWn=mFG3,K=C=N)lU(c0Y5&2MoV\>:B37<CB`/]TZHl`$sA
%$Xa#r//R^)]sSj]/>I_n8pluL$SW&b+"OiPP5tjH,L[H/e+54.ijD^E7aHZ$?*8D#pp!dRTljYek(%@C/P"nD1MTrm6I%'V]=#1r
%m[k\!XG:X#@Ym)uO(ci8b"C=dPk2L1^+3\hd<*eok[Zh,o)8b79SS.mUBK`#^A_t!DBWXt01QH,l8,)@J-2bh;R&4r>[o!.4no1L
%2&akMLB<&X8h,C-AB%O3J+B*n\XU5jI/3Kmn-.F,:H6&kW:_"\Ca%r.^_6`dllE-_Ju:dW-o-.b&T]3<WJS3')0SQ7&8H:+@U%?9
%]TOk2hP_Y&ad\gkPp`HeWN(lQaAh.),2fhUBePh79B,V1\bR:<A8^YJ$Zr>p@m7@MOPqY;XsI'1?!f7(OubKQ3=uF-RMq)oU[-][
%Z:?I>f:W;L]BPmf'!$X&e"`hDndr0Ui7ijBe(QgmCOj]Eim*e+QOM'fSU'@fokNrjG35tL1Xu;kN_uLW:.Yn8#$H@f^*iI"+5I7Z
%@L=sL%VL$BY63T+F7$"'T%A-IifKHN.c?#e7?9a%Ue@OY>B]%SikCSggGdDHmF0?Ls.(%:6l&nd@dJjRe@R^6EaM(oa7aajYNpti
%<HH(TqGCQ+,K'ET;#gk6hs],,D^/B2B_tO:qM-Q;maZ9`DV+m5\g;3#HFSsKXoc,.Fe?2OoOAkrfOIuK!U6"ChNGJ7b3\]'LUn]^
%:X4TI1"g29m<"j\9$4rCf52Mmq+o\$5@W$$8TbT,rP4!GXe!SJoQfT/*61hDTpjnm;2)l4/J.Y,>`@>igIgF.cn^qR6m]n>i[Vi8
%"[iULPg*fgNR1O!W\9HoWK98C"("<5jNM#GO:q%r'qtVEEQ[/rZ8GN'3hRf2ffAR2IeCF-.uC#%T%2-H4sSVrN]SD]e94S+b@E:`
%_tQRja/D%Mcee3[.=gpu!7/,!_A@ftdb^J5I+l9q]`lTg?YmQAohr6naG"Y[$+u[77%)56>a!RnXfnFL:,r76qQ^/?rg110\<7T1
%lsY<2TlBW`n8HuG%H/_;P,jcD(1,jbYb\HU5_eb4bOl$E<^>pJOJ2$R_gh=;OFcoR<-ukWB"hr,e,*WeS:2l)1?5?CNmZs2a:)Jj
%)RC!;UKpR,pB[6D38?SYB.+4"a@":K"AAItee&*/KKQn;/\0A48gudmpF7dI?Hg!7^"2T&3]"F*9d8kic9%6E\7B3WD,J!9a<N)%
%dJ.dEXD,IFK=%k^Jk@!SD0j&L!j/1I(:'&KN9XS+d=()06D^nk<<2<K;^2->(tc@3:#in041-Ai>,M)?fi*tg_K*Xid`K!a&5L=k
%[=>sNIGlGAYK&AdX)3P*g(&Noj9Ju1%u7FLK+Z:4LG?*Q\^/3&4PnbZ`/jn<hkV@[=M45]Yq7HXC8Jp$/Vt+m0g9ionSS0(YC,eP
%`NPG=%uQk94Jn,l,[3ghTX^ia5o4Y`VBkh]g"DE\8]HDLm*@O8kq>7X-+O?s'=\LM4!;>6g?/sCAR%e$[$\g<R5Ecg$KYaCmcCF3
%Wm!.K6Y:Z7E1JGWh.B>hY.-;_',:*D(="Wm'XL:F$/L=H>Y/0[/_-U,YfoPDopo"&3X2(\(c`_\?VBCq2aW_pSm$PX--[*:f524t
%nXfW1r,Rjg+3h_OmNCE(*TSoZYuSmiTQXGU<JB#uD(DZXGXg54NKI,mVlR;#aE!>9Z:[0=R>=J?NZl0aihLs9nNeHN`,99?m3!CV
%,@o2)Xb`QcappTo/pX=8"e7SaZ2!7;!qch@(t3fWh9r2gH^@MGFdrtXk;P*[i:!20]:=f"I5#5`A+=di^57WQ"1GA35&jpkPbX7J
%kN,l/<;@&_2iha0.k[ONJ#s`KHab5C5HLCdN&m2']G?aKEgsaijN<nTKi4H(XIRJcenRGXX_/Z\PSJ#*ZZulqUd<skN$2<:+TlHE
%6'jpV$Q9\]l=Zb\5D9D/'O_CdCA4G.gGPbC]Z8IP8imPpT`NkjKbg:aD4kWhk5?)_"0(LA:PQkMW+d'4b4-"SKFhidXREb(=E:K,
%?T3i)Seo/]%d8\hqtC:-hgV/J`1%kHFoDt@f[Bp,8WslQ%\_qbgd7OS_[qQ81YPdsORoLi8Y"P86g9r+3jc[%`Z-,J'\n`W*>Q5c
%,C:*J6S*BGN;JBAH$?pW6KE785[K[ab1=HKl(HebD.s!TB.SK<RU<r4U@4\/o7i:i#K,mo6u;f2r#]&6kBDgN4K,6)rR,\NJk1[d
%Z+jX*kR/B1,;0pgeDf\l>$OQlW1M.Gd+\orSWoem#;sJrKOb\#FmoO$cmlIW;Tf9](kBMJCRrRfoUbrK-$T!nWouqg]*:[L%2D],
%X%I+Xj_BR:0cE'`Mn-0u#)3pQkr"IaSobipSjnO-'D,4YWB1TXe?aDfqsm)W`0U8+6<h2IRJJKh7Q'<7HS2K)Uk_Hm6O,`LWEYl_
%M5$#sPp+Zcm[s^n`C\Ti[>LpaX)WmobB`j$$$DYTg4DqB$]U!\A&Dl/*J")C%g[Gaf'>rN[9?U',VZ6\$nrAuh*OmsAjB9HFe)KV
%WZ_O#Fn66V%fW'&,']n!@4o`'H":#/PW*'^p6bb%Yt!SQJVUA1GT]%;RbSIJ.';b=2NB"F3CaEH9I5mL21%E<QL_BMGuLI!b4iVN
%ikNioeWFfCq\t,#[N\JV+V`?3ksVgcR$TtPH-4"E3J7hRkXcgpYiM=iZ^>T(KkGBrn_nj)RK%f=@:>nR,[4`;)%Gg+[X^1:M[dmu
%4S/4gZfhceJb%.nPQ6!iGD4"!R>IQ(^[Jj(^AW@2OlHkV6khfcM-Qo,9YX?WKTS/:[R@!eh3AiZVsLb+G[c3^PDeRC^`ehh+QN>T
%kJ*<)#f)E?Tme%C?2o3ml#l'/0rFWU';t;@H\`>*.iCuK,u:$@O&.bH'5KDtMb-?gjNuY>9UueMWo2hOa\FPK'*$M<5Ys0KQ$jb9
%`^ZOQ.X/U?1l^"l-dGI9Xe@Z3Occj/*i(E1Y)Z(JiQDB=6YsmWd10kJDA,sNe"NO*;-]#qIBEL21WQ]he+pYW#An8(%%[BC%Ah;e
%inLHe?3rpQd6mIAF=[=Z7,knY4as7LqnjO4SP>3&OXe739&EEm*8YstbhpE5,TRQd?6XVKR:UOf[Srf8jUa2E0*:FJ,.$D=Bm`Wr
%F,0>hgG^bk3G?A9']\7F"#j@6:+3cEVBG*H$]F<;$s4g#^`Mn]5]t]s4tmZWSDhAY[%1%C-":CDL_=SB#68hk6VB^=j\jbLQ;W">
%5/*tpm1Wg+d]0T&?"mY7aREpl(U2:AKcu3E.b/6$,i?qFLUP.*GH#-V2gko1:Z]2enS>)\NFU(%TjpDh^5WEZ_@.VM.q[J8ih-T0
%G&#bplA@`0#Uhs%ie)7m2;UF+IoiRhV@6#*nu]'dUo5FO@J>#gBV\lGYmF$V?dhr+Fn>$uoU:n`BN#U:H]FU&j[bm)$E-@lhPrrq
%/^OM"iGlgmCVW3,4K)&!(4NEo7sT%?Z$m@%&*/(:gF!*dh]pEN[W8q;::\;s7O%"FX'p!B;_YX(3fBfsGjl,Qm!Q13QFEhl@ZOCB
%HH^`fEQ"UUZ8t>TCFH.iA+(Or%r75jEkP\(:h;=Ek@lcER:\"m-aLl)TP+1)MQ]6Xfs2U+9+''T#YPLalP[fYI;Jj60IA;+(?g$p
%:ZL))0:K52Adi[2>mGiG/>>\?+hRI-En5Ek(IGjNXJ#Ll.\@lXI7Wj15B?H'UQ#.l).fVMLX\MqD./Sa4i2)T0h%D?Lh!*uMDb0D
%7q>jkP?[7W,D/8C@(MS<8e]ZDkk(W\;m8UO8/X1/j>LTe4_^/kNA$M&Al3IV:[3L>!E![%`(ihP(8BVGnT`h6PbY`K\ETU@`&G1&
%ab?#j*KNhd.>BZ1oHBGN`RZrR3a'+\MXWGN[PP$[3q]75k98!u@LpS6LC^Pb3&e\8?LM_h6=KC/RuPqSs,ChQ5W5fJR3Q-c\fl`C
%IglDoh<G_)@d#@G&HuZi`p(]M$c<dc06p&YCG#3o<-Z)gb1r>sLFGie%PnZDr4*R]dg)fM#>Q5lHlY3S6]qkO.HCuW*3_/ocb;c=
%SJk;;1U'pdaReO1-!\61EHE+kSQ(8flS["`QJ'%?1)p1.QlAp6Lq7)OloGD$n;C*01'G=gpcN[p%"fuNRA-u1//k!cL##?DE0c_c
%C8i'0_]&a6<NdV`'ZCibJCX9jQ#2PMb:K<"/$hRQq?6&]<`="4n=lj&4h&V-8_L;`8Xr><<kt=<H#s(e4i0#rN-;0l9ch+lEeQ.@
%^f:B24.$c8rPZ)fnP2=@eJU#9<p_8djX72GhgVtK`J]HV26(F\s#Q!nq7g.%f6/+C:pi;.Sn/P.:T&S.7_Lk>lq]Z;N;&&?qm2"j
%o:=i.H07/L(9cbBENH`5]HBuoGjoioTFe+Qp9chIFZ\-tYH=M3KV2NPg:9)6!>=7Q\M_=\UN@5*?#0t$>u+W&CN'!`D*g1I;=8cu
%<>JIOTkeR3Ep&[rOF+lNZ)*.c6uEH;7L4ZJLTo!AJga.-,1m"Y=6]Iuj/)bZ"CF+FlZ-!$I;9Z3O/_GG<[4DBQ9=X-SRkiiO6?lC
%2ld?%j_iO2=4sl'?]SL]X/p^,g[GN9QgoXMbE#]W'+]b7:HT3RcgX2mOdIS*7\,6,.81kfW3b]B*,^,,;(#3"n0lMR'3b8?[u2d#
%/?0)JDh:_1Zm'.u:lb6+JEJUo)DY@e#9F0KPq[$4^bLckcGL$XaaJp6*6'$fl*4S'2g0U*Bn-AZ$G(RD'@h[^G\Taa?X$QJ\k5]]
%T-5T3r"&2qO104\'FhknZ"gNPmBHbK&t9&le?QJ[g7[;%PhgNR@O.R)3_Nj*A!mO$RW'mLGMk+O.RT3gJYC'o]bb9-hWfJi[L]@O
%"a%5Z=nFdo%tpO+rY&WgIHGNRYN]PYZJ9XG".:s3i2iJmkeBQ0BiQ>k"a>-t0Nk'#HeA_p\We/jTS4[%Vc<d]cLoe.+t,+jS-W"b
%n$s)ts1jIV-Hg[+OH%&Fq),[\?3M'9jie9R\g2,Q4]ZrmW$(J"_jeht*qISf!E`8-XgXWT1)f&^LQYh*XG9/k;!1R`/2`IN/d-RK
%SggG(<[iMND%_.%P#+"hTutq<BLSKsD-;:b-E<bC_/:h]D%ES%lgb-+0CSf=NY]3_MO:dKDQ'((CH^_(*HB3>FEQI_eR!"9d=11:
%_=OGDq4RQ9!II\2Ogh:MBA)TW[7E_Ki_';reB#!O69e,HYnZlW5Bht\$S*n_7I<m?'A=,MhLB3od<:Y7'Ip+E$6srmggMb,r11-V
%!j5GcmKgG$-VNnaOkG(KJ8`3R&-,PM8je+00oK.J`6BC2F&;!HU/`;aICs(mGA(7A.b9c8LGb)bq-/o7s2HnoGHqmm1G&lX+Y2sq
%-CZ7.F_V>E1ks+p5B>/'W?V*u7()P<BjGH&Z=gp_>8+dS^od'q-=s$Ns)!=bR\]lX%lF69^NuEC:O2Ft\[A9,8J=uOX5OK1UQFCe
%_8QNgEB>,bd'I#`"HEj[a\/LfaP@!!g"!XQ/)k$i:d7r_5r$QE^F$C^cq?@4"B2X;pUTnGnl77HQo'fZ0?EAuWfnsgPDp'1YKWG+
%:K9TDHCFC3#BTsOJ%&Ai^;`io0'Q.KhIG#4:CISciGHc?NBL)Ad1Z$(7'gN0gF;$uO&/"B[faK6i@Lll;'>h:[f3J8nb@4Li\(Z2
%[tc:%YsA=.;=tLa(FK#KU&T6Em10s.B8FF;Xs&`O\+o%]+sOKXC43FEW#NrWPJ.eEFb?IXrORfjC[bpJKo9_r=@4M/cXXYkU%8A?
%I`O)'BTHqb>?cEnhUdjsKlt,4Tt&js)=ItZGLQ-mE1%PQp<eU?mtY*BT;l6Cl.7J\Ym5+%Mo#n\"(S\AKR7Ao-OsB$`!hq1,4-<t
%igE`VlTaJp9P[T7!X3;KFn6#u,-0&DS0PRfMj:#c3GY#ZI$"QfcKNIn6P>t/OMhSBF3g;)DRQlV`S;BE`A+)e@O#'RT)&i1`S]S?
%cZrR+g0^NAn(5E($jQDq"p5I`5-+n./0t]FP^^HI=t@Fnf3qn,^,tQ<\ah\6'Ggfi=cL@`4ErKgQTSViQ4&F\=Q?$::1;_5&!%a#
%USqGqC3ouHej&1Jn8d1iX:OY$=@+o0)U+++%R$'ik&[=RKTeMkh(lb'PHmZ(.DT*==+%TYQimA-F.`_25Q!m6ruY"7jR0c_lMpSD
%Pko)E>-2mI:t>^%J!L?SBK:Wu?3lOTghu;C-@9k31C`QX/Pma"d9#s13Y>k0<R4;`q6EIZMCLORUAerLi=/NC4L:Hj+"?m+qGGAG
%TLEpZf3S!lj0KoNU)-(J$66b>b\Lh%p_VIOZiI7VP<nml<'Q:]5%b#O\'4ZNR9p,$\-W6[OiABIXJ^5SQ2B,fQRVP?q!K_]3Q!eK
%ft6Ze*:2W&ATpZ1k@:Xn&Pa+<6ur^cL_P_:Wuo>?p##7uV]&X"GU2au::VuD\-ik^\!=3r6$W:;;EQ8p);@TN_>QLtGhH]\APJd!
%1<g^,(pQuNk/A5rA#dh'O0ZVSL<idrj]9aHE?PH:UEt5VH;;X3I57WqDjY19`u>PE1<($KBh"Zq5O@C01i#%[:(<VZ>Oqe*&>@AK
%>iu&ffOXoaE;!$>s4^nB`30\%2C7nVpFE[#No:DY<broq%'QOD`POu&_C+e\`QI1rkEZJk2TZ6.^MC[&-SGP-*u?IhO/']a:'aPL
%M.<rS'T,+/_[0'8q=:('IXr:M#",I[)HGQra:<pC)\R[!^EU`"l>Tml;Lthc2,T*iqdJN\l.@`-mI[bMaXfPP+bEp6_cs/t/78gX
%]lIi7CC5iYjOl3P5g`#-K4#=nE,#I[lVr_X0Y+ukop.T%>?WdH+YUN>*`/gA6Vl=P$DGM]]qC)l&#MP(cgt#+*l$]MFF[FCTM8oh
%/HUF&WdQD+A$EJ066FB-dX*HQ]d^9(+E63sfEFYCg5>M#FkMHsTb\BpZ:"S4$<b%q4&eA?]Z\?,LV@`V)rSHs&/Uoq<982S4VsRe
%fMnS//A%gW&tdK?4sa5o0!Y9PnkQ98]fZn-GOT7$eRr&<2.VC"j;=19Ne@U8#&EK<&4Pq*3Ej*8a>F)R^Ao]u?iYgp*t!A+6%j?2
%`bapt[4JC7&'#/O7r!M9ONlWE)2@JkdLjW<Wj0hbRU#!baL`ptW)b'U/i"d=SZ"Zc[9ZXT5"-oMNq.Sn5^L.u*6B(]A%,S_05-Z7
%$E#8fJ/u<@qU@n7R9if(<WWCqh>pL`n90XQ#>;_qB(rtmI%])X%BLFnQrFNL=pV*T/16IKW7ZYBH<"<E"ghT&BO&^6m715Np+iS,
%.e`IqYPKsD2>l6MROL6#+pF_]UMJra/6@<Hmf'1RjG?S'[j]k0&G`0hCiQK322QT3Ck;;8KfTa4i>GfQ>E*c&p$C'(X/`A'J!MdC
%$*gLu>,$.EXZY8!.ofgbI]\K$kV;0,!8Lqa/DkrcZ@&UcIA\WG^0JhO.=(n^=ap;XAbg&NItin&]f9K%dUEDPS1-A^'a\m)do":*
%XQnf>l5_$!0pp[C+]-88QdB:G7![LSqFE;J%V:j?.ipRLY\'i:Xpc9,lH7/n1=JUqq\gc:=/a_>HCV4_V@(F.VNgl-Y9=oFkG;6^
%W5A,lkYF77etLL=)*!G>;)88ZBP9Ko(.)hTCSMVn?JNI1-DT0g9$HR-pbdGd!Y_?d1AV5Z>^85KGnWbh6LJ;]RR6u,1T(DW1__ih
%ZuVDn[Nb&,".AnqTGh+(,LhXVS]e)C)Y%j#Trk$).24PZ9,`l,mm\\%LU@@rFGZB=@"(atG">)'\khhGMc5lT!o/\P.jK.mQ.V)H
%<D/])\e3cDHt:0_(En2u-G:tf*ho&>;<*52;J.g%iiA8'UE'5k1PWWs&Q3EipHP+L=,Kp!GEnP_!t)_#E?$Fk3eX<AHVcq:'2&M7
%R9n[UIL\8/Si$T?+XN."&\MA\].L5L[YgNf$:F$Ya7RT;M]G:og5<:1;fKFjdlR0D?LJ'L@q!+e>X/7WK'W(B>gMfu0"=ZT=YbYD
%86;,(eN`)J*/NemX3L7i:'-tn_uYVnYIZ+)eo=?,&,+3^(UDBaG1'SU@Y$IopNE2bKBQAEo*JGJ$iD6WFVXZ+F%VP@F`h^B!eWkj
%$HPfo'K]&=ftjOL>#VW5!lVG607q+ZJ1/#P3>*73CmWg',,2cid3F*NhbFOO_PUTIBfbSdcUH<>f'=C/?bCKsO&NGs+p8%sT1m1Y
%/HM^CF-[5tP`PSTDd\5=_\aPU%ckIt4nS>5q&I'$b*/YL`/Q[$NsC^#'8fh$)D-'1m>oa4?2:pM@36^_d>BE$WPYZs!LSP:;n6L3
%^k9i4c:dB7eq@baQRP),Z-<n_k^DO'?DMS?o3Pe<f6O9fQoj%S2B&h_g.jNgEMu,t+r7Ft$VcP_+h&5"$iKW;$`h7/%NgMjS5_sb
%'.(Q^E>Mj&i/B6lh_V\cA*sYUJJn7^ja;(fHES1bm4ToCF72=k%(Gil?&[YE`=4_K(d$+lg=)ML$uu)ulSZ0ujE4=k(tI!m/a@Bg
%*lXCl9)Q<7(]SBf>l;3_,lSfAr;EjD&LFf?"g>Utq`85Y^[>BR^0('<mp/Q+cguP:]*Li@W;/XD?(NonQKI>+hhKQe\Tt:fFMM*[
%`EtPW,$(C*YFCmM2Pe/22QrL4f9THge*r0;,X5L6]`ac[hLiX?].;6HHR[0h+p;I[&7"a7#Bgs1<OI=1nGNm.kO2BX^O8jW]7-EQ
%9oRjs*_0jCZ\eA8gh2ZmJ#:XX6Zp"4kK&t:7d2feDMukIU/:cu*YQ0fAM5c(C.Tr@JPaRQqq45PU+6N7qH=fMHml;F`Xrt7i1.UA
%+[$oE-9N0qcNN.D0r*TGFS0MXeeoPL1R>0&<j=kIKG@lIZIO8&Ca:h/PQnCPd`[S!I;.eOj@E;(hE]rg^hp%%Fr.IQ-$CU\!r+6J
%["NIbYpgMQ<P;/(p%@klPh,SMV=bp),gO1sZH7[+W/k'_@9"J3De4i`"0h4\J"r8<)`"(jE9AD,\Hu1]$hL,IE^T!%eSk]-8+RE2
%[3M>r:tQDUFJb)Ed).?_Zs)7rb0D[?JL<Iq$'MPt!-0Pj[_`T.>jD%B=ed.j/m^(tdRDH-D?9'Nq'j<m$Q62d\k9pR?;VC)NbE[u
%h&JH>LG1#%$p#9V1;V%".KUL(c='.rG^=E$2hBkS2af6"]Co]q#A0if+JW'<WEO"D%B-/8-ea9f?.Vl'HFQZiaIne>l*a9/*5Md`
%CCiq:BLkilZ_O>6#&scSOqLGg5GMD9dn0`GDs`l_%N<i"JjKiQ`E:_SO:#.Q[Qq4F:uY<S9!2IdKn?'7);s2sZigjujo:He6I>g7
%4K$mi9YqK)i@%aGNom$%bg:BI6K#*PM5:F#?3LGp+=YSF&l\<6g/Z3OUY6o3r!;acMB=Do8JI"7[1PIM:<X*1cW%:Z!?&TI^O$*t
%'N,#mcHi%eT*c,cLeWNO)>Rf$bZ88)>'N%mbSr##F14sS"uMb*MFtd/!Jh*E"c,=M'rA0q5A/8fHJZ)t=:0SB.B+N^75q^9*e)rY
%DhOL.blL80BVUMGc%0?YJMeklZ^aPkpB:>q'SJ$8BVeOOMBn?.]:An*#UCJnZ5?S3qkoP*$8iaMVL#73V;:ERV"_[MdhTC;f\>NH
%BNo7HA#gV?j-T8G4glHf$HeHc1fRBS"]oW%Tp\Vc&@@E2p^8rL(bqp$X5[I%*ier#4QhcdC_NPW[T2Yqj]hD(V0J^,3OdFn'f;J)
%DWp94+rZCAddVm^l=LSmpAGIrV>)KZ(mjg'':+]bH#X_mBSF>[e.':%!s3Pccn4+r]9!<`Pj$5",%No\jeI!,-`\X5lX\Es1@D3F
%e1B56k5&=+iqt5p_gBAsm$up8]+o4s[D^h)=<6ZO&>P=aVKb;-V&WUcD7LQB^KXkYVk22n@WaGK<hr+$*15^QgXPAGG=6h8Cs-hW
%=1mUV)cTZgZfh2hVb([(..>5Ri"V0]<^-@*NNf+a*1A.:%./5OMj#L_IfM51g<`t<g[d#*3@oj.qfAdW/E2/-bX^0)@#,>=>Ki"_
%J<d3AWu3`(%pEL/X9*2W2UNr]$^=.M<Vr%`Dusg9<.kUuTIl+15VZLq.XWLfA#\2&]b/P]8e>fJ+GW][D@nOP-HCR(-/uSm:AJf,
%#QaE4iiY2D>R.1.#bjDoVMc:hG"2[P),i_2coge`6ZAa;U"CB+8]P>TU.VZeb1?G6WK.K?_e[B%601s"fH/5h`'<70GFI+Bk0?>B
%:aZ']mntQKM4EGfR2%_JB-\n8%9Ol)nflDQ*E1=+`24J1l"Z3R-uk]Wr)T":?Dp=fU];g%3p3KXdUH'79Y'[qOHCtc1XA#g"Z6rp
%/Kn/2`FrbpO0h+(Grqgp&[pKsVq]fG[Z0619XJJir<d]mkECDB%n3mWmT_@F@/H7c\NTNFU'%Q%I?"<nS(AEWhJ@25QJ1>hF\CF3
%[*0*#ZL6(1l>&\)jt84:o4,@]hL:"^^LFApnXJb<\*MAlE\S_Gr3gD/*9imBic5>24SPG>5/cbZ?+A!$X2Bu=p6F[b\c&e%/bu,%
%J(ADlT;+V>p#sYOqt<uq*us/+cM0>,5^a\(:eP[<:b6Lf;Yqp]g.cS&Ehl1K5lFOWSh`q`@M;"ReblgDFM%SZI2EB0_eP-/+c$^3
%M7A6'#S+*(YWLm*0?+@VS#=XaioFC'CEj"W^Hn<Y6"9jX8:24H^5k4FLSZI>=EB.P3MiKf/YD8ASW`qFc.)$hgU@_YpP>G30PgUX
%TkDs74LLOM&Na?I(Y]VC7g?2(1Or"/k%g.L1m`HMEkG1@Sn9WH?Gt;i;8K;0dA;V0,WOW>mb1j&;#!#BV.3k";)r7DN:>jTe0[Er
%=b[!t`(nBs&IgCN0rmLqd#b20HBE!21/=)]RO=o.076V=/,/Vo=pk@<Zuh;GMCRg$6UiKM0QPSr@`p^mFm+",qoUt3ekX`/]4IcA
%ahS!H:IH;DOg/Hu2%l1YF/M8tOb1*@#gaa:`+l<b^CLfE23N-!AuF;@AHq&`:aVW3?b<fmfjmh!"ab'u.\TIijVlEhl=3dm&#>`>
%GEL)CfKU%U"MZ[5FrZ2P)0B'^>a'rLeZ7@$$9-+Q"Y`pH4YjW0e?TfQeXbYWNaj\q/T0`Z^ReFNYY#eAlb'I?K*B-;m8am\Ls1kt
%]=49[\:V$uUPm2Wp/(n'OaI,N^ITra?:,F',/da`$8Hlo)O03KnHVk4qS^"Q)"*aSq*H'*m_@`&oH[K:qXfmIl'#4I5cK6bMM?2_
%>$SP3U'.0MFl]<nk"\u.9F)@fU-qn4.hAa=FM%pP):6<-'<%mn_L,5G/,(oHpU8`8Q"slqn-<un'e5[A6:0Y,==9u.:J$ZhbWo=S
%hM6q2LN7,!e[6:Y:0`4=5egC-A!fB:]KL$c9HSU,9:;CqRoX\G&QA9SJLC+8a.5cF@$Qd/_-cJC!2[j83rk+&%iD:C),;mRQm9ij
%</a.8"YsQbTc*8rc!()a-W@!9Foq'l[Bkk_Tb4;Qgb=PPL+\eo.]/EO8tkQ[Z3:YkKWL$e%102ldo/T\%[1@Y^IqOCHr$a+*?[N8
%.u*"Da,iA[\I)J-78`(MQ/0oZR)d#?LHnnGr$)RMfW/*!PFGWrM-6\#*-Ers:IV&a9+KK5g(N>BG)n5`]olbG/h>UOn?"u3[jamA
%N=3g1%9@eR[4`8(;V2UX%4b3'49913I0s^oC\R;!h;T3(nbINrY%AZeWuYX@;Hep\h)9p4Y]Q4nS\*dSOig]ac[2a.0]1IJ]^?Ae
%(ok`I`5Om:5?[;$I)?2+N)f,<D!I`;fIGt"eakspZFFtu,b,o^``YHI9#4N&k.E,Ye<lD7,R3s9MX7]1Es`*aMrM'OM:RkRe%`TG
%ir'cRm6`=(YYtN)cC$"=!'UtR;:r@s^njGr'geq#`MZI-!k[N@,7-Oao]OT4]^9Y-1@PB]r:UrOUJP2bBiL;)J/M-7T??Inb*k5`
%6\%&C`jXV.TkqbCJq."klSc^]$NKPXg$>QAQ\3!+BbgCb,7!eY>&mglk&76\B^q!6o_;Z;*MZ+d`2A0Z*I&+qKY3"a-,T7WB?H4o
%YVfLXI#Sj61rVB1"#^X9!GH%CK*4R7SP[4&)$:Du.\q-=gQQA%%!<1'>0Sk@OH&tV\sKTOkRml3c5lb]iG>S#3_#"&9a5?s%+[tU
%X)<O4NQ>SL*fR[_0O]J="%DDtTu1=[Xl48BR^G@cOn7e(HO=7hR?851a<I9hPT,jh\c]=j@?cI8+*^`l<_W]&,sQaGb-f0'jEB9K
%8X,YT9EaPu\f_oLb]p!q"([k]f1MS6?9V7!MY-C;"gBD5gP;0kV<!4.C!GB)biYk0e<]6\iGHLU-?qD4_`,ns&M6(e?kdUpX\'m9
%8lkWP8k=*VV,nnKJLWpmkfCZ#_P)C>[][fUEF1+^oGM&<*E<t(.-P=RDg%$XW3qsBKannp5,W%.<A;eOLk;cjn_u^%mD*HL/#\)T
%HT7+c2WPi7M6-KDD.jZqLp\WsJR"!eQdL1>#Zr82b"n66dtCA,#=X3>6qOc*h0]Ye_3,^@jA`G^67,NtMspLt/W_K^am\pJ`Ub7I
%6b[$@Do@+*<F@%U8nod0:u&8!)l&O"b.S3D[^@&:h3997m8/_5&t-e"`QH`gh!MIHS?ZrnC?2rV@dO!J66YV+`BW/F;B.KZMLLo.
%ln:/L%XKNCYlWUQ['iK_k?u6"*fJMg#$[*Zj)d)p5*?(>ar#`V9V-F'\hu(T4lVIUen`tVYF$_4pan%l4Klk@U/.^39%L.k:njH)
%NB;>WX.%DH.ToNjce1'7YG%Y?b=.[79^nt[Q(/&9gg[.eIL.*;B0V6Y_i[l4;:6f!%MG0?MNXS/@MbGnPL?\71i(h^.BI:f6Fb-?
%/XAL!='M;qf2Q'H$G3N!h*Ou2ikPeR*XZ@=jKOjaWoH/C/oY@l7Ht_P5$ODkW^R[i5%ZPH,j\1?59BE-P1mhRWPka4/uZK+bAC7[
%d=sO4Ug':KH![",%k+=ock>7(D.>;$jt;VD`*99*lKoY5*JM2QlS2Ik["OKG;MoN5_CIA'Pkj`P4sK\$Y$LXH?t4b#>P*'_U:$/?
%BZ*;AZNt^bXHO9X\["J)L(*!&h(Zc8NRJ<Ak>=cHIbYThWX^4GS8CqS+ST5NESZ]u].,J$[V+U(O_eaT$c`%m$sZ@ZHU(Tq\/HCI
%\1Qk$:;S[#*'"j+NSLeA:6Nr5fJk>=A>X;j<J6oIc-S)fl?#%8(QMX#]W\F.D5DP=#CF*d-'n7)A)CagN&[%fjOdQ&8`*>4T4h66
%iF2eo;F-FC>Ka!)P\Hqp)Jt5U/M&P`B]eSAfFV6C/Y,j)\22*uHI7.(S:bb^iTl4KX:f+kAU\t]Q*gQXP*JC)5O5$W,>SU]Em$hR
%oU$5Lb)YuF-<NP4fW!L5lY/-gL(]HU8i1hh)B@]iOE95TI0*tDO#U6;gr<.+(O=@IXOC.=7NY9V]W[9eNLu2&!B\'uU*@1OID9k@
%$l5\[^o>I4SD%a?P!\,S?,q'rjO-m7=_Q94kmU"INr#u%7/`.n^L'%_q3LDYSjE8m<_IV-k6Gi?OB=T>QBa3Y)URW6BSWQ0@UBWj
%:jlkY'AM$*iZg&Hd&f]F.'7]uA:i/(;D'7(d)''IS[/U69ZX0UTfrtgnl3#fP+qATDe^5`m9NO*8J\/#8IHO"\&\Zt)R4llXiak$
%k`84B4G45?p=gW*;hRe6K%]?RcDk"#Jf5r7&.1KoUas4>1g)D3WnM7<XG>#2[cJ1%+0+Bl']+qF87-81l]-d;1ZDHF_tn[qL/9JC
%"r..!?H81q"CYQ_d'<_Nabk<imnBFV%tZ^r^,g'u5aB1q>+%fp(D4KfCC/]eSiCHKo//3+[qr&].Tc1J_RLpOP@_R2%G#oAJfF]s
%BbNiX:+ul-R,q'jBFlhEOm4_dN/8ud1/Ts#`G0$6&7SjG7<f;Z_=q!rcF\XgYS>+`S&H98Nb+Ot@3]jqOCs$G[I89+;1gLdRpZ>X
%&<7&J&TV<rI?\Vg$I;E)WbDr!YSh=US*]tWYsn%2_Wm8"40"Erk>\k&F*f.MV7Ft^$FnEg\gQ1gP8s+<1._ft>MH4m<\ph@VSAA+
%.4M>hKblOIY[Lik4&`M'b7=,fKLBI;:j'!+M\,<<cLKhlOj`4PFaK]m4C]ktjO.>Q-MAO1!h=bH^]MCAHDr`(4L>+`!Motr4Z#-p
%(I6FH;/tQ#&`S54ib:R9IG*XdC#iCt7IsD!/4D"F#;"5qR-W8MXX(`>-bD2U8;>3J-u@k=\:@-Yg$tu;'WU=2+s\lT#U=)b:tB'@
%=M(tg;Ci`g]IX_Og@'hBV8Y!F?s9Eoj0UMKA\UI3T=lb]]e@?Q:pFMCYdk's3jaQXO[d)\I%8-"T`Ko,8sB)j4+H>/^]?-`#"'D#
%;Htc@e['Saql8iVb37:U.a;QA-8PlB-bL*]d\U4\g-7TYi]*,9j,s#Kq#'McHsZ9!cf7O7B8VHjhf\%ZKAdXI(=nBF>$\o=4K^<G
%,FZEPJ6ag)IbRJEY:o23NDR?gh@4ra!=9I5NslnDOoFa>oa%K65YaAb9to9$'Qf:,'oWB8cqAEiqB->8C"j\MMn6_pg#*?MqhTq!
%0[7:BpK:+'TMM#*N?aom[hO'o$/I?p5&7)Rp/&hgh.+q1GhNc):SFNSI0\lgIuOq1@@)pA;XsKJUUs+Vd>T(/G-Q.OZ)s_Qf?cIF
%j<_J"7Ars?k*4fKr]3SHkm:OCgNJH1`>T'Mfm<RN$Hqh%jU[k[.JMj(5G4U60`J5bG`)j%>EILuat@)n[1?3`/I*J,0c!14<AVk[
%Qo"H_AjE/0OjC:1BYL?#4B2OcrH,i]2P^Of%lL5*cE#UOO)4_2\E%)c\OA-"9!-VBP+A7]HQ4tq8R?Qm3=)CA#5+L^%H!OtT#F2h
%<o=0g@mlOIY@6A;ojIn%@eA1c27,&f@isOVO0V)pF&ln,e"7WmIX(!U^]eDjY=L)&<+TYXL6J$(<VTQdPZe>9I::j,VbQN#]B%47
%.Ypp$#3HQJIl3$_jq=6`,%KL2l"QROF@7JN@m_+2J`o^a+)D)uV<9;d=^o9-5Cls,maLO26"M7d"OVAW"gmY_om;RlrmK@(B1a/K
%&)]$_=(q!@s41YS"0R/>O6UH56OoSf<qg\/5"u6lV2T]&fh2ZU!cE,)?;j[CllKdm/=7k+Qu2pf?#U$Y)U0sY'FXU#0C`S:g'Bc)
%A:Y#(iBcD`&K6l-&a$CE#=t63fSVADM?=?7ape9sWMoVR,&MgqQi5@(oC)\i:;DAP&+_4L0O)<jBE#ec*WEr.8@e]nm@S`ds#=%c
%DBHCe_`2Q6c$sUQl:65a%hZJpJ,aQErbil3[oh:4N;rqT5B4nFGm3Hc/[k4gaKf$^-U>.Nled3PPH-Z?=a][&];cRZgLg$Rs7k83
%qthK8=kIisX8&G&&V'iX:Jtu%<tI_--0m]cGnGS(31#^O&lka%LmZ>eW%TB$.LPg;Y`0h9fI7f[BF/be5nQY4EBr@,>X\rbV#pMt
%&O2pC!NW/MTP+X[L2KM&k)U>k5Y;=h#_n@ZUkoh/'DH0\+h);cDQ](8[Cc>!<b,\1G15%!\)HSHRj,U?.8)Zm^>$^>FR^8(6ripN
%dnkOL"UA1B$*=rib6RR"Ou,S$2D)e`)JY+TV(aT_:Lq7\9VHE8DcQKYW'7^`,678h=j(I.[,d'0TO&%[*hToBe3-2D_qHsV\$Omf
%'SlTZn(,\2/h&si<dmMC+N01>Ti0n%n.+8OR,GC"etPbU/f@tLoJ;N];tm&='PJD=WIqJH`Wf4C5kB!X,U`ffh(!TmGM?3Y.;0KU
%I#eq\9uF,>YFCfEFL8FQE?^I:;Bb;5%o:a/68Ag/:c\-N.3'*q*\debX/GAt:Dk3CCS@7mB>T;UnGXtQbrP>Xbfl[Wgt;4e4\'aA
%*_HEY`S:qf)c7u$Vkk%-#2A6cNOKaKW%r\K5e6Wf5Dj4&^KjTN!nuT^>8h,$#d635[lHH_C#CXQV:cJ2!hJFQVnWCT?r;*[9gFF7
%IZ;hbkm'hoV&8%Hm8-m`m#`u\U@_6>0%::0(F%W+gsiZ.*T%2l-LFD5n%=l2(1X-k-f7mmQ*ftdis+mt-J"DT@sN#+5SS9$U,Dog
%g%rR(NWrX"_CEUUb,_7m#+j8WWBAj*ZT*8;4Vj;Z%9lS9-0IEQ<G]P"L.6BCGE!Bq4akorQ:[7<,cmPW5-i4346I1_=/<+W4qa69
%i<1Yl'ifu<WCA55e4aJ8d=L,FRbQ1=*)b!e2,^7`@>W=s"n<hqZ"$U,&M$`LEdY$ES5F+s%aB+*-o1)dfb.&B!*>XnoF.;S+bibL
%or2tj4-?U7]5I(V<'Y$()=n/-!*tL`GDVWTC-J%s@B_#?\ELQ$G`cX!+$@n`M4nZYK;#PnC-I:/Ze\@?Y@D,`DC[=<>XdPT&[Nn+
%_N8H+Y9>BcjG,&%K^Yr;Qs9AX2$p'rNC(2^T*sX/<8%N*UB*pKE!A"*JO0rmLqK0bZpWO"V",.KF)4o,5GC,JA&KJ:=d!E/H/)%1
%1KP[JKHNRkL<ueA6<peE!fS<^VOlPF`I*"rjndeES]aIZeDP5ZX!<+(Xs6?!")m66=:#u]Km>hJM83,T>h*m;-r08,3G$_+9(MZG
%&-BAPcUbjA#O\s4k$g5cgXTbdZ`:4a*,G!)!diR7i;'DK#Wh.%KA#nYEEQF23E*&:"iJMHKao@^Zl)09E]\Y#$6s[6B.R=s2jmB@
%OYoCX-@ae!7\d5_g\'qaS8c*\G/d">bt3iNf7#fNQGc&+/_mP/qQ/OVd<$[DaSIe(g:=D2gHFUjG,f"aV$g(N.7bSib^CM?of.#>
%4<V#?BXP7X#7>8sA@6Y+b$gjENS*g346hGLV=D8]11Y#EGK6-I3ZC?+c11/RgD6b6G`(>_[nr<pj:T_]h@6kb&[:Gl=_Ke4BfuA`
%Bb*6FYf_/tILoI>Y,kjl??ZI2)a[<Jo5Wo)HdLc0dRVEgSV9$h`+Rr.)K1S=HK/=Cq::cfb5$.-'2Dk]eIC0rLNYu?lTT8I_\CVV
%]\'#ShnG6W3[XChX4"k"/q?CpPlS03f:/(j@&-CV.`+P`rD_5$TpHa'71G@P&S.n!Jg,UhqO1SA)YKP1Pr"12FZO!oXh89tpYa3Q
%FY^<2ijf;E(/*bV-eE?R\O&T=a5`K51?WnL:^m"PnqeE(9FS%#lhAFOQ&*o`I6VV['`/';a">8`6X..Bo/<]2N.!Um9N_CaO[ZVG
%cpAWHP?TnT8"N4ofrZR]BIHK*WGmcA*?dF%X]_H0BtAlXL@t;Hd^_k62p9D,2n,DE3C,)X!kR7;8m:g4.p59=p2QM,V.\.gRJodl
%p@VF="ulCE6&%1,LAq=K;9p@MKFM3hGJ8D0^^F7GoWYXX@YhU"Y/-;+AB69Z6@mt5\Z9<=;=a4gC,K8>g@o+%^lTT%./Cr9$:F9"
%];-72dCP,#,JM@[c@JaX[4!(l6nrh_It+q7J#9a*YGSEbaattYlPC8G,"deF)#-*AJn!3C-",emTY#n]BJ/fiXBWapMWBt)oHSGB
%!FkH*8S$YOr8!*5'\c]9%GH@\P#<>u*OQP"NCJ=d"!U.=TR(sK3&Mm!g"Sac>GS%eaJXE#-OPJtK6Pd<HBY/"G2UGmNmp&RFq_'k
%/_X'BnFU_N("C"n+K$K6^J_V+kcq*B+#Sm+s+:rb8%^[T7+5h0cHhoRjiB9_**4KE+HcWN`3B4u'>pWM:lf:8*iT%l1hsMlIE;YD
%0cVo6,mXZmM%?3F3cUDLpJPO<)%Ej3rrrcN4?[7@4<adrOe`.p1cUR,JNGT),=S%U01ao",VtbHS%6qZI^O_3qC'acM7'N\$SuQ%
%oh3D#9D/([@F1,C?F`=UAB.39I<6,f@p7cN4e&'*K3NRh$$=pK^Lo[VdhGeU-E*[;\q8D64j$:Jd]*54fb1,01-Dt&,$UeI%a4BE
%q`=Zf9/Tp?TL^'Hg4:Gci1H`&/DZ!TG`H_kLqKZl`("4K8.;^+*K_?X4mEl!elKA>5Wa_sRJO:08-?!/ZjAdY[]QRcqRaB+O0U'j
%J0R-$i1XtR$SkMWgZD;2L6b0PfmMOMcYMV`BE!WB7@TCd(,A):1&i",cVg:_l.8jn<m-s<GNd\H6+[(cCn!mQWlrX(1nIN,G=R<m
%6BIC3D<RW#B?5H*#'<83S7Ba%n-Dk!<^,RbPS'Wt9ohE!"s*,!1fl9%&9WhAM%,i4Jmu26*<R0/QR].U3jr+D.Z+61\e.FX-]jGA
%^M:L3&&GAN^8\%4>JI7dAqiX@_eiBuAY.=09"gCR6ZrbhB-V$UbsqK+jC#D'O0#I#U8'5Ol0$?$a9c`-Ht@\4>]E!Z7le`uK:0q>
%TOkFe<C-56QW7Oa82[k89o?Z>GZVN/QTF@2JBo+HdOgu_#JW2>q5&^$oodOA4HLpeggT>+KHJ[fajq3QZiF'K/\bb2'E=/Mbh6?I
%M>iuT*D1'2ScPMbdH8=aTY?]b099a2pDTc.56E8V6+4f$`7$rJptQq2<XfK`'*l75q\h.hdY;8MrEgd`d,N+u*'(40+g\ipV*Mu1
%QFagh6\'#9O8XQRYN?'m"&r5[n=3foB8L=tF9CMf>9ZC9HLo8uNdI"3N0mP.c)=6s\X)8*2Mn1VbhAHnX<S*ee!Tp!<g6]W#$QQC
%H%oQdhFb27I/6@e/-8ec`IfsI=taJ-7hX:q)Q4\TnuUepq=jp4hu:lXE%'6*rmh&@pFlQa&&.a+WT]uGN<#gS]7fu.q@lO31=11R
%.;pfWP%/R]1I@e8`ogCPHGepEV)6-UZ!CCs9M>62aTdfN6Wej>i7+7$+u-:m<DfJPV7^Mcl\Z-P7f4\X['9%m3Sc]O&HZ8?0nkdV
%'Il:[)joTY@](0L75Or`\0]6\.T,QBYL5d@'QN:V8iPHL!+No076cp/6g4miNJa/!5q)FuPMq7NV-/'UOK0nNP5o@(M2<q*UFTJj
%D'Z@kEJ;pUOJou.6fX[s<3S5Nr7cVp*ri)A6O:H2j?UN.ZTDHZMO;b&BP-7\dl9.+QK/p_#\#L/@.V[F.6432iKJQWoaO4rnp1bD
%W"r*?pb@@GeR"54IE%^Z1P&t"l`#Z7F.JVZ%P`GF<Ce!KmT9lCgk8iK;nRWP3'RJu0j:@F<jZm**"L4Z7]+=*eF9mq_MO^R:Tm#G
%If8D&a)ZPPf,E6C@Fh\V7qSLfC.)Fk%Du;KBUlY$Hp0g'<fOR4D9%T<=4#ETY>-;s+kAO\LKO"9oZ2;,qM>,7O8JRA8^7AVA#52:
%\se5L8.g5<JqYPl-Rapm2aa):EN'jl#Bn8>hNG#985r*Z9tbhUf7*^sA.soPd=GE6jZVK&F44<S\Rn*I4AI,UVrG[UO[u*llZ].c
%`csE;%TPn&0L-j.,&!0>ih%9F&/(d>a7[\%0QW$7[5>c%MHme\lKVZGLEOLo2V.=s"g(LQ(DRL<KM<ns-E>SB9E7A-C1fX7/b[73
%5=Zp<_AEUGbt1`em9p3cDGhWfV732o]qWP:<qb\`DBMX`i(?[EQ.QhgfEm^&d3V?;d;9I!f'S8IJY.Ycci^_JnE:2Ah6/"Y5&t`G
%f;+^0cO2*Ia=3fmp#UPaR$;2!0@fA\C$@;Vp:DdmEb5ASRP?S;q-()U,`T!BVSpC<M9Ya"G99'\WOX]/H23N>Th%-Ipq&u(8o`3k
%hju5C.?4bK:^/hFa`cXX'LV+>TaM.d%e*QIT444Z\bLUp5Kn.YTiG0[2W,9N`VO8IiW<m+q:U3D2!Z9e!3K73%5?:D=p&O<:ib:5
%eK/`aJf@`D<8G3CKF]kn&$?pD?"ZiV$+X#J>KiJ;oj6r#UAgT9#iVZISh)*YdbMc3gmCNg[s.]<&>2-eO%!H74KED:)/.j3eHm8W
%8C$\::9n*6%g@MJE+!>abh1h^!%8lZii&O"Fq/Z7npG5KSu4Z@)\NCr:>mUsP(OVZg.p<g"Qb6?F[Gjh65%"`LGY[eo:d_]pF(lI
%/BB--)Ml=58#2TOj>7B5L3e.QiGBWKkUDLk8hXlN@`TAH4J">=hXV;NE#4\uY[?6Ak#Yb9R:Ce68JZ`:jCN;ETN2^u^23XDM"r[N
%Btn/k\lXY+aiL]$81"nP'&Z$^+lg2u802E6.nAeq5i-ApjepTaM"'<JMO6/&P.'H*>,h=`1*F\jX%a:O]/0?RGEVN#;efI"kZP5"
%N:'saL23$PGV'D6j(53P?t15E3ZcVZ6<+`"[:H/7#.2$MBO"KJL=T:b<pc`]W[pU,'cY^,4:.eT=>T!o<AHf6r^O[%(=9nfpG<!'
%UdfgG@!)KGY(Z`L>:e_Lnk^Z^UO6l"=LV@*&*4s$`$qBlM-9st+cqESoJYnk$Xn`\Z1dQdXgZtV=DG8:^`!-7TD\X8Io;GO.2bJn
%['b?($Lt%KL]6^Ks,[,.s#9uQJ,](qs6l"urpo//n9=p(+9(oQs7O]fpqQgs5Q:Iss5m,Wr.k=8O"Z"Xa++#bJ,.!sr:.PWrmf2a
%rqsfdrg/-2o,h?=q*4o.s2t[T\pr]-rpJ\A]79^eJ+N[B]J^tn~>
%AI9_PrivateDataEnd
